Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.2.199 Build 20180210

Compiler options: -o2 -qopt-report=5 -qopt-report-phase=all

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/176=0.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5427,11)
  -> EXTERN: (5430,20) memalign(size_t, size_t)
  -> (5432,2) set(int *, float *, float *) (isz = 787) (sz = 796)
     [[ Inlining would exceed -inline-max-total-size value (2712>2000) <1>]]
  -> EXTERN: (5433,2) printf(const char *__restrict__, ...)
  -> INLINE: (5435,2) s000() (isz = 79) (sz = 84)
    -> (784,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (785,12) clock(void)
    -> EXTERN: (793,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (795,10) clock(void)
    -> EXTERN: (797,2) printf(const char *__restrict__, ...)
    -> (798,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5436,2) s111() (isz = 81) (sz = 86)
    -> (812,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (813,12) clock(void)
    -> EXTERN: (820,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (822,10) clock(void)
    -> EXTERN: (824,2) printf(const char *__restrict__, ...)
    -> (825,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5437,2) s1111() (isz = 97) (sz = 102)
     [[ Inlining would exceed -inline-max-total-size value (2022>2000) <1>]]
  -> INLINE: (5438,2) s112() (isz = 81) (sz = 86)
    -> (864,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (865,12) clock(void)
    -> EXTERN: (872,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (874,10) clock(void)
    -> EXTERN: (876,2) printf(const char *__restrict__, ...)
    -> (877,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5439,2) s1112() (isz = 79) (sz = 84)
    -> (891,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (892,12) clock(void)
    -> EXTERN: (898,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (900,10) clock(void)
    -> EXTERN: (903,2) printf(const char *__restrict__, ...)
    -> (904,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5440,2) s113() (isz = 80) (sz = 85)
    -> (919,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (920,12) clock(void)
    -> EXTERN: (926,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (928,10) clock(void)
    -> EXTERN: (930,2) printf(const char *__restrict__, ...)
    -> (931,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5441,2) s1113() (isz = 80) (sz = 85)
    -> (944,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (945,12) clock(void)
    -> EXTERN: (951,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (953,10) clock(void)
    -> EXTERN: (955,2) printf(const char *__restrict__, ...)
    -> (956,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5442,2) s114() (isz = 96) (sz = 101)
     [[ Inlining would exceed -inline-max-total-size value (2021>2000) <1>]]
  -> (5443,2) s115() (isz = 97) (sz = 102)
     [[ Inlining would exceed -inline-max-total-size value (2022>2000) <1>]]
  -> (5444,2) s1115() (isz = 99) (sz = 104)
     [[ Inlining would exceed -inline-max-total-size value (2024>2000) <1>]]
  -> (5445,2) s116() (isz = 113) (sz = 118)
     [[ Inlining would exceed -inline-max-total-size value (2038>2000) <1>]]
  -> (5446,2) s118() (isz = 101) (sz = 106)
     [[ Inlining would exceed -inline-max-total-size value (2026>2000) <1>]]
  -> (5447,2) s119() (isz = 98) (sz = 103)
     [[ Inlining would exceed -inline-max-total-size value (2023>2000) <1>]]
  -> (5448,2) s1119() (isz = 97) (sz = 102)
     [[ Inlining would exceed -inline-max-total-size value (2022>2000) <1>]]
  -> (5449,2) s121() (isz = 82) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2007>2000) <1>]]
  -> (5450,2) s122(int, int) (isz = 85) (sz = 94)
     [[ Inlining would exceed -inline-max-total-size value (2010>2000) <1>]]
  -> (5451,2) s123() (isz = 97) (sz = 102)
     [[ Inlining would exceed -inline-max-total-size value (2022>2000) <1>]]
  -> (5452,3) s124() (isz = 97) (sz = 102)
     [[ Inlining would exceed -inline-max-total-size value (2022>2000) <1>]]
  -> (5453,2) s125() (isz = 101) (sz = 106)
     [[ Inlining would exceed -inline-max-total-size value (2026>2000) <1>]]
  -> (5454,2) s126() (isz = 105) (sz = 110)
     [[ Inlining would exceed -inline-max-total-size value (2030>2000) <1>]]
  -> (5455,2) s127() (isz = 94) (sz = 99)
     [[ Inlining would exceed -inline-max-total-size value (2019>2000) <1>]]
  -> (5456,2) s128() (isz = 90) (sz = 95)
     [[ Inlining would exceed -inline-max-total-size value (2015>2000) <1>]]
  -> (5457,2) s131() (isz = 82) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2007>2000) <1>]]
  -> (5458,2) s132() (isz = 89) (sz = 94)
     [[ Inlining would exceed -inline-max-total-size value (2014>2000) <1>]]
  -> (5459,2) s141() (isz = 108) (sz = 113)
     [[ Inlining would exceed -inline-max-total-size value (2033>2000) <1>]]
  -> (5460,2) s151() (isz = 92) (sz = 97)
     [[ Inlining would exceed -inline-max-total-size value (2017>2000) <1>]]
  -> (5461,2) s152() (isz = 102) (sz = 107)
     [[ Inlining would exceed -inline-max-total-size value (2027>2000) <1>]]
  -> (5462,2) s161() (isz = 97) (sz = 102)
     [[ Inlining would exceed -inline-max-total-size value (2022>2000) <1>]]
  -> (5463,2) s1161() (isz = 96) (sz = 101)
     [[ Inlining would exceed -inline-max-total-size value (2021>2000) <1>]]
  -> (5464,2) s162(int) (isz = 84) (sz = 91)
     [[ Inlining would exceed -inline-max-total-size value (2009>2000) <1>]]
  -> (5465,2) s171(int) (isz = 81) (sz = 88)
     [[ Inlining would exceed -inline-max-total-size value (2006>2000) <1>]]
  -> (5466,2) s172(int, int) (isz = 79) (sz = 88)
     [[ Inlining would exceed -inline-max-total-size value (2004>2000) <1>]]
  -> (5467,2) s173() (isz = 82) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2007>2000) <1>]]
  -> CP_CLONE (5468,2) s174..0(int) (isz = 80) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2005>2000) <1>]]
  -> (5469,2) s175(int) (isz = 80) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2005>2000) <1>]]
  -> (5470,2) s176() (isz = 100) (sz = 105)
     [[ Inlining would exceed -inline-max-total-size value (2025>2000) <1>]]
  -> (5471,2) s211() (isz = 91) (sz = 96)
     [[ Inlining would exceed -inline-max-total-size value (2016>2000) <1>]]
  -> (5472,2) s212() (isz = 88) (sz = 93)
     [[ Inlining would exceed -inline-max-total-size value (2013>2000) <1>]]
  -> (5473,2) s1213() (isz = 87) (sz = 92)
     [[ Inlining would exceed -inline-max-total-size value (2012>2000) <1>]]
  -> (5474,2) s221() (isz = 90) (sz = 95)
     [[ Inlining would exceed -inline-max-total-size value (2015>2000) <1>]]
  -> INLINE: (5475,2) s1221() (isz = 81) (sz = 86)
    -> (1960,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (1961,12) clock(void)
    -> EXTERN: (1967,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (1969,10) clock(void)
    -> EXTERN: (1971,2) printf(const char *__restrict__, ...)
    -> (1972,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5476,2) s222() (isz = 96) (sz = 101)
     [[ Inlining would exceed -inline-max-total-size value (2021>2000) <1>]]
  -> (5477,2) s231() (isz = 97) (sz = 102)
     [[ Inlining would exceed -inline-max-total-size value (2022>2000) <1>]]
  -> (5478,2) s232() (isz = 101) (sz = 106)
     [[ Inlining would exceed -inline-max-total-size value (2026>2000) <1>]]
  -> (5479,2) s1232() (isz = 96) (sz = 101)
     [[ Inlining would exceed -inline-max-total-size value (2021>2000) <1>]]
  -> (5480,2) s233() (isz = 119) (sz = 124)
     [[ Inlining would exceed -inline-max-total-size value (2044>2000) <1>]]
  -> (5481,2) s2233() (isz = 119) (sz = 124)
     [[ Inlining would exceed -inline-max-total-size value (2044>2000) <1>]]
  -> (5482,2) s235() (isz = 106) (sz = 111)
     [[ Inlining would exceed -inline-max-total-size value (2031>2000) <1>]]
  -> (5483,2) s241() (isz = 90) (sz = 95)
     [[ Inlining would exceed -inline-max-total-size value (2015>2000) <1>]]
  -> (5484,2) s242(float, float) (isz = 85) (sz = 94)
     [[ Inlining would exceed -inline-max-total-size value (2010>2000) <1>]]
  -> (5485,2) s243() (isz = 97) (sz = 102)
     [[ Inlining would exceed -inline-max-total-size value (2022>2000) <1>]]
  -> (5486,2) s244() (isz = 96) (sz = 101)
     [[ Inlining would exceed -inline-max-total-size value (2021>2000) <1>]]
  -> (5487,2) s1244() (isz = 94) (sz = 99)
     [[ Inlining would exceed -inline-max-total-size value (2019>2000) <1>]]
  -> (5488,2) s2244() (isz = 86) (sz = 91)
     [[ Inlining would exceed -inline-max-total-size value (2011>2000) <1>]]
  -> (5489,2) s251() (isz = 84) (sz = 89)
     [[ Inlining would exceed -inline-max-total-size value (2009>2000) <1>]]
  -> (5490,2) s1251() (isz = 88) (sz = 93)
     [[ Inlining would exceed -inline-max-total-size value (2013>2000) <1>]]
  -> (5491,2) s2251() (isz = 89) (sz = 94)
     [[ Inlining would exceed -inline-max-total-size value (2014>2000) <1>]]
  -> (5492,2) s3251() (isz = 91) (sz = 96)
     [[ Inlining would exceed -inline-max-total-size value (2016>2000) <1>]]
  -> (5493,2) s252() (isz = 84) (sz = 89)
     [[ Inlining would exceed -inline-max-total-size value (2009>2000) <1>]]
  -> (5494,2) s253() (isz = 91) (sz = 96)
     [[ Inlining would exceed -inline-max-total-size value (2016>2000) <1>]]
  -> (5495,2) s254() (isz = 84) (sz = 89)
     [[ Inlining would exceed -inline-max-total-size value (2009>2000) <1>]]
  -> (5496,2) s255() (isz = 88) (sz = 93)
     [[ Inlining would exceed -inline-max-total-size value (2013>2000) <1>]]
  -> (5497,2) s256() (isz = 102) (sz = 107)
     [[ Inlining would exceed -inline-max-total-size value (2027>2000) <1>]]
  -> (5498,2) s257() (isz = 102) (sz = 107)
     [[ Inlining would exceed -inline-max-total-size value (2027>2000) <1>]]
  -> (5499,2) s258() (isz = 96) (sz = 101)
     [[ Inlining would exceed -inline-max-total-size value (2021>2000) <1>]]
  -> (5500,2) s261() (isz = 90) (sz = 95)
     [[ Inlining would exceed -inline-max-total-size value (2015>2000) <1>]]
  -> (5501,2) s271() (isz = 85) (sz = 90)
     [[ Inlining would exceed -inline-max-total-size value (2010>2000) <1>]]
  -> (5502,2) s272(float) (isz = 91) (sz = 98)
     [[ Inlining would exceed -inline-max-total-size value (2016>2000) <1>]]
  -> (5503,2) s273() (isz = 99) (sz = 104)
     [[ Inlining would exceed -inline-max-total-size value (2024>2000) <1>]]
  -> (5504,2) s274() (isz = 95) (sz = 100)
     [[ Inlining would exceed -inline-max-total-size value (2020>2000) <1>]]
  -> (5505,2) s275() (isz = 104) (sz = 109)
     [[ Inlining would exceed -inline-max-total-size value (2029>2000) <1>]]
  -> (5506,2) s2275() (isz = 106) (sz = 111)
     [[ Inlining would exceed -inline-max-total-size value (2031>2000) <1>]]
  -> (5507,2) s276() (isz = 93) (sz = 98)
     [[ Inlining would exceed -inline-max-total-size value (2018>2000) <1>]]
  -> (5508,2) s277() (isz = 100) (sz = 105)
     [[ Inlining would exceed -inline-max-total-size value (2025>2000) <1>]]
  -> (5509,2) s278() (isz = 105) (sz = 110)
     [[ Inlining would exceed -inline-max-total-size value (2030>2000) <1>]]
  -> (5510,2) s279() (isz = 117) (sz = 122)
     [[ Inlining would exceed -inline-max-total-size value (2042>2000) <1>]]
  -> (5511,2) s1279() (isz = 89) (sz = 94)
     [[ Inlining would exceed -inline-max-total-size value (2014>2000) <1>]]
  -> (5512,2) s2710(float) (isz = 117) (sz = 124)
     [[ Inlining would exceed -inline-max-total-size value (2042>2000) <1>]]
  -> (5513,2) s2711() (isz = 85) (sz = 90)
     [[ Inlining would exceed -inline-max-total-size value (2010>2000) <1>]]
  -> (5514,2) s2712() (isz = 86) (sz = 91)
     [[ Inlining would exceed -inline-max-total-size value (2011>2000) <1>]]
  -> (5515,2) s281() (isz = 88) (sz = 93)
     [[ Inlining would exceed -inline-max-total-size value (2013>2000) <1>]]
  -> (5516,2) s1281() (isz = 90) (sz = 95)
     [[ Inlining would exceed -inline-max-total-size value (2015>2000) <1>]]
  -> (5517,2) s291() (isz = 83) (sz = 88)
     [[ Inlining would exceed -inline-max-total-size value (2008>2000) <1>]]
  -> (5518,2) s292() (isz = 87) (sz = 92)
     [[ Inlining would exceed -inline-max-total-size value (2012>2000) <1>]]
  -> INLINE: (5519,2) s293() (isz = 78) (sz = 83)
    -> (3283,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (3284,12) clock(void)
    -> EXTERN: (3290,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (3292,10) clock(void)
    -> EXTERN: (3294,2) printf(const char *__restrict__, ...)
    -> (3295,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5520,2) s2101() (isz = 86) (sz = 91)
     [[ Inlining would exceed -inline-max-total-size value (2011>2000) <1>]]
  -> (5521,2) s2102() (isz = 94) (sz = 99)
     [[ Inlining would exceed -inline-max-total-size value (2019>2000) <1>]]
  -> (5522,2) s2111() (isz = 132) (sz = 137)
     [[ Inlining would exceed -inline-max-total-size value (2057>2000) <1>]]
  -> INLINE: (5523,2) s311() (isz = 79) (sz = 84)
    -> (3407,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (3408,12) clock(void)
    -> EXTERN: (3416,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (3418,10) clock(void)
    -> EXTERN: (3420,2) printf(const char *__restrict__, ...)
    -> (3421,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5524,2) s31111() (isz = 262) (sz = 267)
     [[ Inlining would exceed -inline-max-total-size value (2187>2000) <1>]]
  -> INLINE: (5525,2) s312() (isz = 80) (sz = 85)
    -> (3476,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (3477,12) clock(void)
    -> EXTERN: (3485,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (3487,10) clock(void)
    -> EXTERN: (3489,2) printf(const char *__restrict__, ...)
    -> (3491,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5526,2) s313() (isz = 82) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2007>2000) <1>]]
  -> INLINE: (5527,2) s314() (isz = 81) (sz = 86)
    -> (3535,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (3536,12) clock(void)
    -> EXTERN: (3546,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (3548,10) clock(void)
    -> EXTERN: (3550,2) printf(const char *__restrict__, ...)
    -> (3552,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5528,2) s315() (isz = 109) (sz = 114)
     [[ Inlining would exceed -inline-max-total-size value (2034>2000) <1>]]
  -> INLINE: (5529,2) s316() (isz = 81) (sz = 86)
    -> (3605,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (3606,12) clock(void)
    -> EXTERN: (3616,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (3618,10) clock(void)
    -> EXTERN: (3620,2) printf(const char *__restrict__, ...)
    -> (3622,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5530,2) s317() (isz = 79) (sz = 84)
    -> (3638,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (3639,12) clock(void)
    -> EXTERN: (3647,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (3649,10) clock(void)
    -> EXTERN: (3651,2) printf(const char *__restrict__, ...)
    -> (3653,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5531,2) s318(int) (isz = 109) (sz = 116)
     [[ Inlining would exceed -inline-max-total-size value (2034>2000) <1>]]
  -> (5532,2) s319() (isz = 93) (sz = 98)
     [[ Inlining would exceed -inline-max-total-size value (2018>2000) <1>]]
  -> (5533,2) s3110() (isz = 114) (sz = 119)
     [[ Inlining would exceed -inline-max-total-size value (2039>2000) <1>]]
  -> (5534,2) s13110() (isz = 109) (sz = 114)
     [[ Inlining would exceed -inline-max-total-size value (2034>2000) <1>]]
  -> (5535,2) s3111() (isz = 83) (sz = 88)
     [[ Inlining would exceed -inline-max-total-size value (2008>2000) <1>]]
  -> (5536,2) s3112() (isz = 82) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2007>2000) <1>]]
  -> (5537,2) s3113() (isz = 95) (sz = 100)
     [[ Inlining would exceed -inline-max-total-size value (2020>2000) <1>]]
  -> (5538,2) s321() (isz = 83) (sz = 88)
     [[ Inlining would exceed -inline-max-total-size value (2008>2000) <1>]]
  -> (5539,2) s322() (isz = 88) (sz = 93)
     [[ Inlining would exceed -inline-max-total-size value (2013>2000) <1>]]
  -> (5540,2) s323() (isz = 90) (sz = 95)
     [[ Inlining would exceed -inline-max-total-size value (2015>2000) <1>]]
  -> (5541,2) s331() (isz = 85) (sz = 90)
     [[ Inlining would exceed -inline-max-total-size value (2010>2000) <1>]]
  -> (5542,2) s332(float) (isz = 88) (sz = 95)
     [[ Inlining would exceed -inline-max-total-size value (2013>2000) <1>]]
  -> (5543,2) s341() (isz = 87) (sz = 92)
     [[ Inlining would exceed -inline-max-total-size value (2012>2000) <1>]]
  -> (5544,2) s342() (isz = 88) (sz = 93)
     [[ Inlining would exceed -inline-max-total-size value (2013>2000) <1>]]
  -> (5545,2) s343() (isz = 102) (sz = 107)
     [[ Inlining would exceed -inline-max-total-size value (2027>2000) <1>]]
  -> (5546,2) s351() (isz = 122) (sz = 127)
     [[ Inlining would exceed -inline-max-total-size value (2047>2000) <1>]]
  -> (5547,2) s1351() (isz = 92) (sz = 97)
     [[ Inlining would exceed -inline-max-total-size value (2017>2000) <1>]]
  -> (5548,2) s352() (isz = 109) (sz = 114)
     [[ Inlining would exceed -inline-max-total-size value (2034>2000) <1>]]
  -> (5549,2) s353(int *__restrict__) (isz = 136) (sz = 143)
     [[ Inlining would exceed -inline-max-total-size value (2061>2000) <1>]]
  -> (5550,2) s421() (isz = 177) (sz = 182)
     [[ Inlining would exceed -inline-max-total-size value (2102>2000) <1>]]
  -> (5551,2) s1421() (isz = 177) (sz = 182)
     [[ Inlining would exceed -inline-max-total-size value (2102>2000) <1>]]
  -> (5552,2) s422() (isz = 178) (sz = 183)
     [[ Inlining would exceed -inline-max-total-size value (2103>2000) <1>]]
  -> (5553,2) s423() (isz = 176) (sz = 181)
     [[ Inlining would exceed -inline-max-total-size value (2101>2000) <1>]]
  -> (5554,2) s424() (isz = 178) (sz = 183)
     [[ Inlining would exceed -inline-max-total-size value (2103>2000) <1>]]
  -> (5555,2) s431() (isz = 87) (sz = 92)
     [[ Inlining would exceed -inline-max-total-size value (2012>2000) <1>]]
  -> (5556,2) s441() (isz = 102) (sz = 107)
     [[ Inlining would exceed -inline-max-total-size value (2027>2000) <1>]]
  -> (5557,2) s442() (isz = 125) (sz = 130)
     [[ Inlining would exceed -inline-max-total-size value (2050>2000) <1>]]
  -> (5558,2) s443() (isz = 98) (sz = 103)
     [[ Inlining would exceed -inline-max-total-size value (2023>2000) <1>]]
  -> (5559,2) s451() (isz = 86) (sz = 91)
     [[ Inlining would exceed -inline-max-total-size value (2011>2000) <1>]]
  -> (5560,2) s452() (isz = 83) (sz = 88)
     [[ Inlining would exceed -inline-max-total-size value (2008>2000) <1>]]
  -> (5561,2) s453() (isz = 82) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2007>2000) <1>]]
  -> (5562,2) s471() (isz = 183) (sz = 188)
     [[ Inlining would exceed -inline-max-total-size value (2108>2000) <1>]]
  -> (5563,2) s481() (isz = 87) (sz = 92)
     [[ Inlining would exceed -inline-max-total-size value (2012>2000) <1>]]
  -> (5564,2) s482() (isz = 88) (sz = 93)
     [[ Inlining would exceed -inline-max-total-size value (2013>2000) <1>]]
  -> (5565,2) s491(int *__restrict__) (isz = 84) (sz = 91)
     [[ Inlining would exceed -inline-max-total-size value (2009>2000) <1>]]
  -> (5566,2) s4112(int *__restrict__, float) (isz = 82) (sz = 91)
     [[ Inlining would exceed -inline-max-total-size value (2007>2000) <1>]]
  -> (5567,2) s4113(int *__restrict__) (isz = 85) (sz = 92)
     [[ Inlining would exceed -inline-max-total-size value (2010>2000) <1>]]
  -> (5568,2) s4114(int *, int) (isz = 89) (sz = 98)
     [[ Inlining would exceed -inline-max-total-size value (2014>2000) <1>]]
  -> (5569,2) s4115(int *__restrict__) (isz = 84) (sz = 91)
     [[ Inlining would exceed -inline-max-total-size value (2009>2000) <1>]]
  -> (5570,2) s4116(int *__restrict__, int, int) (isz = 86) (sz = 97)
     [[ Inlining would exceed -inline-max-total-size value (2011>2000) <1>]]
  -> (5571,2) s4117() (isz = 83) (sz = 88)
     [[ Inlining would exceed -inline-max-total-size value (2008>2000) <1>]]
  -> (5572,2) s4121() (isz = 85) (sz = 90)
     [[ Inlining would exceed -inline-max-total-size value (2010>2000) <1>]]
  -> INLINE: (5573,2) va() (isz = 78) (sz = 83)
    -> (5029,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5030,12) clock(void)
    -> EXTERN: (5036,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5038,10) clock(void)
    -> EXTERN: (5040,2) printf(const char *__restrict__, ...)
    -> (5041,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5574,2) vag(int *__restrict__) (isz = 80) (sz = 87)
     [[ Inlining would exceed -inline-max-total-size value (2005>2000) <1>]]
  -> INLINE: (5575,2) vas(int *__restrict__) (isz = 80) (sz = 87)
    -> (5085,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5086,12) clock(void)
    -> EXTERN: (5092,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5094,10) clock(void)
    -> EXTERN: (5096,2) printf(const char *__restrict__, ...)
    -> (5097,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5576,2) vif() (isz = 81) (sz = 86)
    -> (5112,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5113,12) clock(void)
    -> EXTERN: (5121,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5123,10) clock(void)
    -> EXTERN: (5125,2) printf(const char *__restrict__, ...)
    -> (5126,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5577,2) vpv() (isz = 80) (sz = 85)
    -> (5141,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5142,12) clock(void)
    -> EXTERN: (5148,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5150,10) clock(void)
    -> EXTERN: (5152,2) printf(const char *__restrict__, ...)
    -> (5153,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5578,2) vtv() (isz = 80) (sz = 85)
    -> (5168,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5169,12) clock(void)
    -> EXTERN: (5176,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5178,10) clock(void)
    -> EXTERN: (5180,2) printf(const char *__restrict__, ...)
    -> (5181,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5579,2) vpvtv() (isz = 82) (sz = 87)
    -> (5196,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5197,12) clock(void)
    -> EXTERN: (5203,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5205,10) clock(void)
    -> EXTERN: (5207,2) printf(const char *__restrict__, ...)
    -> (5208,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5580,2) vpvts(float) (isz = 80) (sz = 87)
    -> (5223,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5224,12) clock(void)
    -> EXTERN: (5230,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5232,10) clock(void)
    -> EXTERN: (5234,2) printf(const char *__restrict__, ...)
    -> (5235,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5581,2) vpvpv() (isz = 82) (sz = 87)
    -> (5250,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5251,12) clock(void)
    -> EXTERN: (5257,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5259,10) clock(void)
    -> EXTERN: (5261,2) printf(const char *__restrict__, ...)
    -> (5262,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5582,2) vtvtv() (isz = 82) (sz = 87)
    -> (5277,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5278,12) clock(void)
    -> EXTERN: (5284,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5286,10) clock(void)
    -> EXTERN: (5288,2) printf(const char *__restrict__, ...)
    -> (5289,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5583,2) vsumr() (isz = 79) (sz = 84)
    -> (5304,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5305,12) clock(void)
    -> EXTERN: (5313,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5315,10) clock(void)
    -> EXTERN: (5317,2) printf(const char *__restrict__, ...)
    -> (5318,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> INLINE: (5584,2) vdotr() (isz = 82) (sz = 87)
    -> (5333,2) init(char *) (isz = 3783) (sz = 3790)
       [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
    -> EXTERN: (5334,12) clock(void)
    -> EXTERN: (5342,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
    -> EXTERN: (5344,10) clock(void)
    -> EXTERN: (5346,2) printf(const char *__restrict__, ...)
    -> (5348,2) check(int) (isz = 243) (sz = 248)
       [[ Inlining would exceed -inline-max-size value (248>230) <2>]]
  -> (5585,2) vbor() (isz = 170) (sz = 175)
     [[ Inlining would exceed -inline-max-total-size value (2095>2000) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(788,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5435,2)
   remark #15388: vectorization support: reference X[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(791,4) ]
   remark #15388: vectorization support: reference Y[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(791,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(817,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5436,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(818,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i-1]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(818,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <b[i]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(818,22) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(869,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5438,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i+1]>, stride is -1   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(870,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i]>, stride is -1   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(870,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <b[i]>, stride is -1   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(870,20) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(869,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5438,2)
<Remainder>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(895,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5439,2)
   remark #25453: Loop Reversed
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(896,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(896,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(923,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5440,2)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(923,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5440,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(924,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(924,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.094
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 2.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(923,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5440,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(924,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(924,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.444
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(948,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5441,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (949:4) and a[16000] (949:4)
   remark #15346: vector dependence: assumed ANTI dependence between a[16000] (949:4) and a[i] (949:4)
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1964,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5475,2)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,4) ]
   remark #15388: vectorization support: reference b[i-4] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,11) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.790 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1964,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5475,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,4) ]
   remark #15388: vectorization support: reference b[i-4] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,11) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3287,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5519,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (3288:4) and a[0] (3288:4)
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3413,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5523,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3414,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3482,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5525,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3483,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.292
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3541,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5527,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3542,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.456
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 1.880 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3611,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5529,2)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3611,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5529,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3612,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.431
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3611,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5529,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3612,8) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.158
   remark #25436: completely unrolled by 12  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3644,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5530,2)
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.292
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5033,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5573,2)
   remark #25399: memcopy generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5089,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5575,2)
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5090,6) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5090,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <a[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5090,4) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.115
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 13.000 
   remark #15478: estimated potential speedup: 0.460 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5116,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5576,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5118,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5118,12) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5118,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 22 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 6.280 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5145,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5577,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5146,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5146,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5146,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5173,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5578,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5174,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5174,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5174,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5200,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5579,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5201,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5201,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5201,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5201,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 4.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5227,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5580,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5228,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5228,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5228,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.094
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5254,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5581,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5255,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5255,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5255,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5255,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5281,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5582,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5282,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5282,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5282,18) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5282,25) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5310,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5583,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5311,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5339,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5584,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5340,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5340,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.969
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(787,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5435,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(815,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5436,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(867,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5438,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(894,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5439,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(922,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5440,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(947,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5441,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1963,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5475,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3286,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5519,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3411,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5523,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3480,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5525,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3539,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5527,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3609,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5529,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3642,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5530,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5032,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5573,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5088,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5575,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5115,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5576,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5144,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5577,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5172,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5578,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5199,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5579,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5226,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5580,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5253,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5581,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5280,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5582,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5308,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5583,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5337,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5584,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5033,3):remark #34026: call to memcpy implemented as a call to optimized library version
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5427,11):remark #34051: REGISTER ALLOCATION : [main] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5427

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r9 r14-r15 zmm0-zmm13]
        
    Routine temporaries
        Total         :     911
            Global    :     211
            Local     :     700
        Regenerable   :     350
        Spilled       :      10
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       9 [9.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       8 [1.20e+06 ~ 0.0%]
            Writes    :       8 [5.00e+06 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: check(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (check(int)) [2/176=1.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(161,21)
  -> EXTERN: (191,17) printf(const char *__restrict__, ...)
  -> EXTERN: (192,17) printf(const char *__restrict__, ...)
  -> EXTERN: (193,17) printf(const char *__restrict__, ...)
  -> EXTERN: (194,17) printf(const char *__restrict__, ...)
  -> EXTERN: (195,17) printf(const char *__restrict__, ...)
  -> EXTERN: (196,18) printf(const char *__restrict__, ...)
  -> EXTERN: (197,18) printf(const char *__restrict__, ...)
  -> EXTERN: (198,18) printf(const char *__restrict__, ...)
  -> EXTERN: (199,17) printf(const char *__restrict__, ...)
  -> EXTERN: (200,18) printf(const char *__restrict__, ...)
  -> EXTERN: (201,18) printf(const char *__restrict__, ...)
  -> EXTERN: (202,18) printf(const char *__restrict__, ...)
  -> EXTERN: (203,19) printf(const char *__restrict__, ...)
  -> EXTERN: (204,20) printf(const char *__restrict__, ...)
  -> EXTERN: (205,22) printf(const char *__restrict__, ...)
  -> EXTERN: (206,19) printf(const char *__restrict__, ...)
  -> EXTERN: (207,18) printf(const char *__restrict__, ...)
  -> EXTERN: (208,19) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(168,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(169,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(170,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(171,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(172,11) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(173,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 24 
   remark #15477: vector cost: 6.250 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(178,2)
   remark #25420: Collapsed with loop at line 179 
   remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(180,13) ]
   remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(181,13) ]
   remark #15388: vectorization support: reference cc[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(182,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 3.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 3.730 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8192

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(179,3)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(187,2)
   remark #15388: vectorization support: reference array[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(188,15) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2048
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(161,21):remark #34051: REGISTER ALLOCATION : [check] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:161

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rbp rdi zmm0-zmm15]
        
    Routine temporaries
        Total         :     185
            Global    :      36
            Local     :     149
        Regenerable   :      56
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :      15 [7.65e-01 ~ 0.0%]
            Writes    :      15 [7.65e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set(int *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set(int *, float *, float *)) [3/176=1.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5398,40)
  -> EXTERN: (5399,16) memalign(size_t, size_t)
  -> EXTERN: (5400,2) printf(const char *__restrict__, ...)
  -> INLINE: (5410,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> INLINE: (5411,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> INLINE: (5412,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> INLINE: (5413,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> INLINE: (5414,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> INLINE: (5415,2) set2d(float (*)[256], float, int) (isz = 109) (sz = 120)
  -> INLINE: (5416,2) set2d(float (*)[256], float, int) (isz = 109) (sz = 120)
  -> INLINE: (5417,2) set2d(float (*)[256], float, int) (isz = 109) (sz = 120)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5401,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <ip[i]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5402,3) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <ip[i+1]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5403,3) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <ip[i+2]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5404,3) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <ip[i+3]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5405,3) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <ip[i+4]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5406,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15453: unmasked strided stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 20.000 
   remark #15478: estimated potential speedup: 0.840 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5410,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5410,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5411,2)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5411,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5412,2)
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5412,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5413,2)
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5413,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5414,2)
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5414,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(123,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5415,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(124,4) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5415,2)
      remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(125,5) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 40.690 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(123,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5416,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(124,4) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5416,2)
      remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(125,5) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 40.690 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(123,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5417,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(124,4) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5417,2)
      remark #15388: vectorization support: reference cc[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(125,5) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 40.690 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5419,2)
   remark #15388: vectorization support: reference indx[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5420,3) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.013
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 38.500 
   remark #15478: estimated potential speedup: 0.120 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5398,40):remark #34051: REGISTER ALLOCATION : [set] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5398

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbp rsi rdi r8-r13 zmm0-zmm2]
        
    Routine temporaries
        Total         :      67
            Global    :      35
            Local     :      32
        Regenerable   :       7
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1111()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1111()) [4/176=2.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(830,1)
  -> (837,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (838,12) clock(void)
  -> EXTERN: (843,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (845,10) clock(void)
  -> EXTERN: (848,2) printf(const char *__restrict__, ...)
  -> (849,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(840,3)
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,13) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,20) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,27) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,34) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,41) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,48) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,55) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,62) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,69) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,76) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i*2]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(841,4) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 10 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 27 
   remark #15477: vector cost: 14.500 
   remark #15478: estimated potential speedup: 1.860 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(839,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(830,1):remark #34051: REGISTER ALLOCATION : [s1111] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:830

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm9]
        
    Routine temporaries
        Total         :      62
            Global    :      20
            Local     :      42
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s114()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s114()) [5/176=2.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(963,1)
  -> (972,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (973,12) clock(void)
  -> EXTERN: (981,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (984,10) clock(void)
  -> EXTERN: (986,2) printf(const char *__restrict__, ...)
  -> (987,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(976,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(977,4)
      remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(978,5) ]
      remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(978,27) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <aa[j][i]>, stride is 256   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(978,16) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 9.250 
      remark #15478: estimated potential speedup: 0.650 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 8  
      remark #25015: Estimate of max trip count of loop=255
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(977,4)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(975,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(963,1):remark #34051: REGISTER ALLOCATION : [s114] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:963

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r10 zmm0-zmm7]
        
    Routine temporaries
        Total         :     101
            Global    :      29
            Local     :      72
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s115()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s115()) [6/176=3.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(994,1)
  -> (1002,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1003,12) clock(void)
  -> EXTERN: (1011,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1013,10) clock(void)
  -> EXTERN: (1015,2) printf(const char *__restrict__, ...)
  -> (1016,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1006,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1007,4)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1007,4)
      remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1008,5) ]
      remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1008,5) ]
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1008,13) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.875
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 3.680 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1007,4)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1008,5) ]
      remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1008,5) ]
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1008,13) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=63
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1007,4)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=255
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1005,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(994,1):remark #34051: REGISTER ALLOCATION : [s115] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:994

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     100
            Global    :      44
            Local     :      56
        Regenerable   :      23
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1115()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1115()) [7/176=4.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1021,1)
  -> (1029,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1030,12) clock(void)
  -> EXTERN: (1038,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1040,10) clock(void)
  -> EXTERN: (1042,2) printf(const char *__restrict__, ...)
  -> (1043,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1033,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1034,4)
      remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1035,5) ]
      remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1035,16) ]
      remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1035,36) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cc[j][i]>, stride is 256   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1035,25) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 1.800 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1032,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1021,1):remark #34051: REGISTER ALLOCATION : [s1115] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1021

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm15]
        
    Routine temporaries
        Total         :      69
            Global    :      23
            Local     :      46
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s116()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s116()) [8/176=4.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1050,1)
  -> (1057,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1058,12) clock(void)
  -> EXTERN: (1068,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1070,10) clock(void)
  -> EXTERN: (1072,2) printf(const char *__restrict__, ...)
  -> (1073,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1061,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1062,4)
      remark #15389: vectorization support: reference a[i+_2] has unaligned access
      remark #15389: vectorization support: reference a[i+1+_2] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1062,11) ]
      remark #15389: vectorization support: reference a[i+_2] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1062,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.900
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.200 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1062,4)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1060,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1062,11):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1050,1):remark #34051: REGISTER ALLOCATION : [s116] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1050

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      46
            Global    :      23
            Local     :      23
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [5.34e-01 ~ 0.0%]
            Writes    :       1 [5.62e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s118()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s118()) [9/176=5.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1080,1)
  -> (1088,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1089,12) clock(void)
  -> EXTERN: (1097,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1099,10) clock(void)
  -> EXTERN: (1101,2) printf(const char *__restrict__, ...)
  -> (1102,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1092,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1093,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between a[i] (1094:5) and a[i] (1094:5)
      remark #15346: vector dependence: assumed ANTI dependence between a[i] (1094:5) and a[i] (1094:5)
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=255
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1093,4)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=255
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1091,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1080,1):remark #34051: REGISTER ALLOCATION : [s118] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1080

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      61
            Global    :      30
            Local     :      31
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s119()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s119()) [10/176=5.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1109,1)
  -> (1117,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1118,12) clock(void)
  -> EXTERN: (1126,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1128,10) clock(void)
  -> EXTERN: (1132,2) printf(const char *__restrict__, ...)
  -> (1133,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1121,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1122,4)
      remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1123,5) ]
      remark #15389: vectorization support: reference aa[i-1][j-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1123,16) ]
      remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1123,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 2.840 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1122,4)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1122,4)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1123,5) ]
      remark #15389: vectorization support: reference aa[i-1][j-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1123,16) ]
      remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1123,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #25436: completely unrolled by 4  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1120,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1109,1):remark #34051: REGISTER ALLOCATION : [s119] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1109

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      59
            Global    :      23
            Local     :      36
        Regenerable   :      23
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1119()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1119()) [11/176=6.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1138,1)
  -> (1146,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1147,12) clock(void)
  -> EXTERN: (1155,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1157,10) clock(void)
  -> EXTERN: (1161,2) printf(const char *__restrict__, ...)
  -> (1162,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1150,3)
<Multiversioned v1>
   remark #25420: Collapsed with loop at line 1151 
   remark #25228: Loop multiversioned for Data Dependence
   remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1152,5) ]
   remark #15388: vectorization support: reference aa[i-1][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1152,16) ]
   remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1152,29) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4080

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1151,4)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1150,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1149,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1138,1):remark #34051: REGISTER ALLOCATION : [s1119] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1138

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      43
            Global    :      21
            Local     :      22
        Regenerable   :      23
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s121()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s121()) [12/176=6.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1169,1)
  -> (1177,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1178,12) clock(void)
  -> EXTERN: (1186,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1188,10) clock(void)
  -> EXTERN: (1190,2) printf(const char *__restrict__, ...)
  -> (1191,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1182,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1184,4) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1184,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1184,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1182,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1184,4) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1184,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1184,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1182,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1181,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1169,1):remark #34051: REGISTER ALLOCATION : [s121] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1169

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      57
            Global    :      23
            Local     :      34
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s122(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s122(int, int)) [13/176=7.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1198,1)
  -> (1207,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1208,12) clock(void)
  -> EXTERN: (1218,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1220,10) clock(void)
  -> EXTERN: (1222,2) printf(const char *__restrict__, ...)
  -> (1223,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1214,3)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1214,3)
<Multiversioned v1>
   remark #25235: Loop multiversioned to eliminate assumed dependencies
   remark #25453: Loop Reversed
   remark #15388: vectorization support: reference b[k+32000] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1216,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 1.025
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.770 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1214,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference b[k+32000] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1216,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.429
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=8000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1214,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=32000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1214,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25015: Estimate of max trip count of loop=32000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1211,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1198,1):remark #34051: REGISTER ALLOCATION : [s122] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1198

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     180
            Global    :      62
            Local     :     118
        Regenerable   :      24
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       6 [5.67e+05 ~ 0.0%]
            Writes    :       5 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s123()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s123()) [14/176=8.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1230,1)
  -> (1239,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1240,12) clock(void)
  -> EXTERN: (1253,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1255,10) clock(void)
  -> EXTERN: (1257,2) printf(const char *__restrict__, ...)
  -> (1258,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1245,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between a[j] (1247:4) and a[j] (1250:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between a[j] (1250:5) and a[j] (1247:4)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1243,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1230,1):remark #34051: REGISTER ALLOCATION : [s123] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1230

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      46
            Global    :      24
            Local     :      22
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s124()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s124()) [15/176=8.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1265,1)
  -> (1273,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1274,12) clock(void)
  -> EXTERN: (1288,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1290,10) clock(void)
  -> EXTERN: (1292,2) printf(const char *__restrict__, ...)
  -> (1293,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1279,3)
   remark #15388: vectorization support: reference a[j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1282,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1282,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1285,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1285,19) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1285,26) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 4.750 
   remark #15478: estimated potential speedup: 6.520 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1277,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1265,1):remark #34051: REGISTER ALLOCATION : [s124] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1265

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      55
            Global    :      21
            Local     :      34
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s125()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s125()) [16/176=9.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1299,1)
  -> (1307,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1308,12) clock(void)
  -> EXTERN: (1319,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1321,10) clock(void)
  -> EXTERN: (1323,2) printf(const char *__restrict__, ...)
  -> (1324,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1313,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1314,4)
      remark #15389: vectorization support: reference array[k] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1316,5) ]
      remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1316,16) ]
      remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1316,27) ]
      remark #15388: vectorization support: reference cc[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1316,38) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.273
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 3.600 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1311,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1299,1):remark #34051: REGISTER ALLOCATION : [s125] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1299

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      53
            Global    :      26
            Local     :      27
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s126()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s126()) [17/176=9.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1330,1)
  -> (1338,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1339,12) clock(void)
  -> EXTERN: (1351,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1353,10) clock(void)
  -> EXTERN: (1355,2) printf(const char *__restrict__, ...)
  -> (1356,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1344,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1345,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between bb[j][i] (1346:5) and bb[j-1][i] (1346:5)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1345,4)
   <Remainder>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1342,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1330,1):remark #34051: REGISTER ALLOCATION : [s126] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1330

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      54
            Global    :      27
            Local     :      27
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s127()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s127()) [18/176=10.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1363,1)
  -> (1371,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1372,12) clock(void)
  -> EXTERN: (1383,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1385,10) clock(void)
  -> EXTERN: (1387,2) printf(const char *__restrict__, ...)
  -> (1388,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1377,3)
   remark #15389: vectorization support: reference a[j+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1379,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1379,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1379,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1379,25) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1381,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1381,18) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1381,25) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[j+1]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1379,4) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[j]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1381,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1375,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1363,1):remark #34051: REGISTER ALLOCATION : [s127] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1363

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm9]
        
    Routine temporaries
        Total         :      58
            Global    :      20
            Local     :      38
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s128()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s128()) [19/176=10.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1395,1)
  -> (1404,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1405,12) clock(void)
  -> EXTERN: (1416,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1418,10) clock(void)
  -> EXTERN: (1420,2) printf(const char *__restrict__, ...)
  -> (1421,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1410,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1412,4) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1412,18) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1414,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <b[j+1]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1412,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <b[k]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1414,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <c[k]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1414,18) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 10.000 
   remark #15478: estimated potential speedup: 1.300 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1408,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1395,1):remark #34051: REGISTER ALLOCATION : [s128] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1395

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm15]
        
    Routine temporaries
        Total         :      78
            Global    :      20
            Local     :      58
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s131()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s131()) [20/176=11.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1428,1)
  -> (1435,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1436,12) clock(void)
  -> EXTERN: (1443,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1445,10) clock(void)
  -> EXTERN: (1447,2) printf(const char *__restrict__, ...)
  -> (1448,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1440,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1441,4) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1441,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1441,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1440,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1441,4) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1441,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1441,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1440,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1439,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1428,1):remark #34051: REGISTER ALLOCATION : [s131] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1428

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      57
            Global    :      23
            Local     :      34
        Regenerable   :      23
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [5.95e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s132()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s132()) [21/176=11.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1455,1)
  -> (1461,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1462,12) clock(void)
  -> EXTERN: (1471,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1473,10) clock(void)
  -> EXTERN: (1475,2) printf(const char *__restrict__, ...)
  -> (1476,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1468,3)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1468,3)
   remark #15388: vectorization support: reference aa[0][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1469,4) ]
   remark #15389: vectorization support: reference aa[1][i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1469,15) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1469,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.136
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 2.750 
   remark #15478: estimated potential speedup: 2.750 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=31
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1468,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference aa[0][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1469,4) ]
   remark #15389: vectorization support: reference aa[1][i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1469,15) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1469,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.800
   remark #25436: completely unrolled by 4  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1467,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1455,1):remark #34051: REGISTER ALLOCATION : [s132] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1455

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :      70
            Global    :      22
            Local     :      48
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [0.00e+00 ~ 0.0%]
            Writes    :       7 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s141()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s141()) [22/176=12.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1483,1)
  -> (1492,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1493,12) clock(void)
  -> EXTERN: (1504,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1506,10) clock(void)
  -> EXTERN: (1508,2) printf(const char *__restrict__, ...)
  -> (1509,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1497,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1499,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between array[k] (1500:5) and array[k] (1500:5)
      remark #15346: vector dependence: assumed ANTI dependence between array[k] (1500:5) and array[k] (1500:5)
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=256
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1499,4)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=256
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1496,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1483,1):remark #34051: REGISTER ALLOCATION : [s141] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1483

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r11 r14-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      68
            Global    :      34
            Local     :      34
        Regenerable   :      24
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s151()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s151()) [23/176=13.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1524,1)
  -> (1530,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1531,12) clock(void)
  -> INLINE: (1534,3) s151s(float *, float *, int) (isz = 21) (sz = 32)
  -> EXTERN: (1535,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1537,10) clock(void)
  -> EXTERN: (1539,2) printf(const char *__restrict__, ...)
  -> (1540,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1517,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,9) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,9) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1517,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,9) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,9) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1517,2) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1534,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1533,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1524,1):remark #34051: REGISTER ALLOCATION : [s151] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1524

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      55
            Global    :      21
            Local     :      34
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [5.95e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s152()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s152()) [24/176=13.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1553,1)
  -> (1560,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1561,12) clock(void)
  -> INLINE: (1566,4) s152s(float *, float *, float *, int) (isz = 10) (sz = 23)
  -> EXTERN: (1568,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1570,10) clock(void)
  -> EXTERN: (1572,2) printf(const char *__restrict__, ...)
  -> (1573,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1564,3)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1565,4) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1565,11) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1565,18) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1566,10) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1566,10) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1566,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1566,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 15 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 4.280 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1563,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1553,1):remark #34051: REGISTER ALLOCATION : [s152] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1553

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm7]
        
    Routine temporaries
        Total         :      58
            Global    :      20
            Local     :      38
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s161()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s161()) [25/176=14.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1580,1)
  -> (1589,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1590,12) clock(void)
  -> EXTERN: (1604,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1606,10) clock(void)
  -> EXTERN: (1608,2) printf(const char *__restrict__, ...)
  -> (1609,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1593,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between c[i+1] (1600:4) and c[i] (1597:4)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1592,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1580,1):remark #34051: REGISTER ALLOCATION : [s161] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1580

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      44
            Global    :      21
            Local     :      23
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1161()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1161()) [26/176=14.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1614,1)
  -> (1623,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1624,12) clock(void)
  -> EXTERN: (1638,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1640,10) clock(void)
  -> EXTERN: (1642,2) printf(const char *__restrict__, ...)
  -> (1643,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1627,3)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1634,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1634,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1634,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1634,25) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1631,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1631,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1631,18) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1631,25) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1634,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1631,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 8 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 8.500 
   remark #15478: estimated potential speedup: 3.640 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1627,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1626,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1614,1):remark #34051: REGISTER ALLOCATION : [s1161] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1614

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm9]
        
    Routine temporaries
        Total         :      77
            Global    :      28
            Local     :      49
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s162(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s162(int)) [27/176=15.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1650,1)
  -> (1657,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1658,12) clock(void)
  -> EXTERN: (1666,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1668,10) clock(void)
  -> EXTERN: (1670,2) printf(const char *__restrict__, ...)
  -> (1671,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1662,4)
<Multiversioned v1>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,5) ]
   remark #15388: vectorization support: reference a[i+k] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,12) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,23) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,30) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 4.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1662,4)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,5) ]
   remark #15388: vectorization support: reference a[i+k] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,12) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,23) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,30) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1662,4)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1662,4)
<Multiversioned v1>
   remark #25230: Loop multiversioned for Same base arrays
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,5) ]
   remark #15389: vectorization support: reference a[i+k] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,12) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,23) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1662,4)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,5) ]
   remark #15389: vectorization support: reference a[i+k] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,12) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,23) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1663,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.765
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1662,4)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1662,4)
<Multiversioned v3>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1662,4)
<Remainder, Multiversioned v3>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1660,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1650,1):remark #34051: REGISTER ALLOCATION : [s162] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1650

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r9 r14-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      84
            Global    :      26
            Local     :      58
        Regenerable   :      22
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s171(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s171(int)) [28/176=15.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1678,1)
  -> (1685,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1686,12) clock(void)
  -> EXTERN: (1692,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1694,10) clock(void)
  -> EXTERN: (1696,2) printf(const char *__restrict__, ...)
  -> (1697,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1689,3)
<Multiversioned v1>
   remark #25235: Loop multiversioned to eliminate assumed dependencies
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1690,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.790 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1689,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1688,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1678,1):remark #34051: REGISTER ALLOCATION : [s171] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1678

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      66
            Global    :      31
            Local     :      35
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [5.00e+00 ~ 0.0%]
            Writes    :       5 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s172(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s172(int, int)) [29/176=16.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1704,1)
  -> (1711,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1712,12) clock(void)
  -> EXTERN: (1718,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1720,10) clock(void)
  -> EXTERN: (1722,2) printf(const char *__restrict__, ...)
  -> (1723,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1715,3)
<Multiversioned v1>
   remark #25235: Loop multiversioned to eliminate assumed dependencies
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.850
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.790 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1715,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 8.800
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=8000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1715,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=32000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1715,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25015: Estimate of max trip count of loop=32000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1714,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1704,1):remark #34051: REGISTER ALLOCATION : [s172] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1704

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     116
            Global    :      51
            Local     :      65
        Regenerable   :      23
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [1.76e+05 ~ 0.0%]
            Writes    :       4 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s173()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s173()) [30/176=17.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1730,1)
  -> (1737,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1738,12) clock(void)
  -> EXTERN: (1745,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1747,10) clock(void)
  -> EXTERN: (1749,2) printf(const char *__restrict__, ...)
  -> (1750,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1742,3)
   remark #15388: vectorization support: reference a[i+16000] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1743,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1743,13) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1743,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1741,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1730,1):remark #34051: REGISTER ALLOCATION : [s173] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1730

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      46
            Global    :      20
            Local     :      26
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s174..0(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s174..0(int)) [31/176=17.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1757,1)
  CLONED FROM: s174(int)(16000)
  -> (1765,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1766,12) clock(void)
  -> EXTERN: (1772,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1774,10) clock(void)
  -> EXTERN: (1776,2) printf(const char *__restrict__, ...)
  -> (1777,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1769,3)
   remark #15388: vectorization support: reference a[i+16000] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,13) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1768,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1757,1):remark #34051: REGISTER ALLOCATION : [s174..0] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1757

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      47
            Global    :      20
            Local     :      27
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.20e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s175(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s175(int)) [32/176=18.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1784,1)
  -> (1792,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1793,12) clock(void)
  -> EXTERN: (1799,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1801,10) clock(void)
  -> EXTERN: (1803,2) printf(const char *__restrict__, ...)
  -> (1804,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1796,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (1797:4) and a[i+inc] (1797:4)
   remark #15346: vector dependence: assumed ANTI dependence between a[i+inc] (1797:4) and a[i] (1797:4)
   remark #25015: Estimate of max trip count of loop=32000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1795,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1784,1):remark #34051: REGISTER ALLOCATION : [s175] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1784

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 r14-r15 zmm0]
        
    Routine temporaries
        Total         :      44
            Global    :      22
            Local     :      22
        Regenerable   :      22
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s176()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s176()) [33/176=18.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1811,1)
  -> (1819,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1820,12) clock(void)
  -> EXTERN: (1829,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1831,10) clock(void)
  -> EXTERN: (1833,2) printf(const char *__restrict__, ...)
  -> (1834,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1824,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1825,4)
      remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1826,5) ]
      remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1826,5) ]
      remark #15389: vectorization support: reference b[i+16000-j-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1826,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 3.990 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1000
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1823,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1811,1):remark #34051: REGISTER ALLOCATION : [s176] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1811

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      55
            Global    :      24
            Local     :      31
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s211()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s211()) [34/176=19.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1847,1)
  -> (1855,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1856,12) clock(void)
  -> EXTERN: (1863,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1865,10) clock(void)
  -> EXTERN: (1867,2) printf(const char *__restrict__, ...)
  -> (1868,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1859,3)
<Peeled loop for vectorization, Distributed chunk1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1859,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1861,4) ]
   remark #15389: vectorization support: reference b[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1861,11) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1861,22) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1861,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 2.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1859,3)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1861,4) ]
   remark #15389: vectorization support: reference b[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1861,11) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1861,22) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1861,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.526
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1859,3)
<Peeled loop for vectorization, Distributed chunk2>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1859,3)
<Remainder loop for vectorization, Distributed chunk1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1859,3)
<Distributed chunk2>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1860,4) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1860,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1860,22) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1860,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1859,3)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1860,4) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1860,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1860,22) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1860,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.588
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1859,3)
<Remainder loop for vectorization, Distributed chunk2>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1858,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1847,1):remark #34051: REGISTER ALLOCATION : [s211] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1847

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm12]
        
    Routine temporaries
        Total         :     134
            Global    :      36
            Local     :      98
        Regenerable   :      25
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s212()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s212()) [35/176=19.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1875,1)
  -> (1882,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1883,12) clock(void)
  -> EXTERN: (1890,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1892,10) clock(void)
  -> EXTERN: (1894,2) printf(const char *__restrict__, ...)
  -> (1895,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1886,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1888,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1888,4) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1888,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1888,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1886,3)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1888,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1888,4) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1888,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1888,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.588
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1886,3)
<Remainder loop for vectorization, Distributed chunk1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1886,3)
<Distributed chunk2>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1887,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1887,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1887,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1886,3)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1887,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1887,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1887,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1886,3)
<Remainder loop for vectorization, Distributed chunk2>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1885,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1875,1):remark #34051: REGISTER ALLOCATION : [s212] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1875

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      83
            Global    :      25
            Local     :      58
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1213()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1213()) [36/176=20.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1900,1)
  -> (1907,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1908,12) clock(void)
  -> EXTERN: (1915,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1917,10) clock(void)
  -> EXTERN: (1919,2) printf(const char *__restrict__, ...)
  -> (1920,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1911,3)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1911,3)
   remark #25427: Loop Statements Reordered
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1913,4) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1913,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1913,18) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1912,4) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1912,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1912,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 2.880 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1911,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1913,4) ]
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1913,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1913,18) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1912,4) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1912,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1912,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.370
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1911,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1910,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1900,1):remark #34051: REGISTER ALLOCATION : [s1213] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1900

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm7]
        
    Routine temporaries
        Total         :      84
            Global    :      22
            Local     :      62
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s221()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s221()) [37/176=21.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1927,1)
  -> (1935,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1936,12) clock(void)
  -> EXTERN: (1943,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1945,10) clock(void)
  -> EXTERN: (1947,2) printf(const char *__restrict__, ...)
  -> (1948,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1939,3)
<Peeled loop for vectorization, Distributed chunk1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1939,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1940,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1940,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1940,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1940,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 2.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1939,3)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1940,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1940,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1940,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1940,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1939,3)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between b[i] (1941:4) and b[i-1] (1941:4)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1939,3)
<Remainder, Distributed chunk2>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1938,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1927,1):remark #34051: REGISTER ALLOCATION : [s221] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1927

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      74
            Global    :      23
            Local     :      51
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s222()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s222()) [38/176=21.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1979,1)
  -> (1987,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1988,12) clock(void)
  -> EXTERN: (1996,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1998,10) clock(void)
  -> EXTERN: (2000,2) printf(const char *__restrict__, ...)
  -> (2001,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1991,3)
<Peeled loop for vectorization, Distributed chunk1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1991,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (3 way) 
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1992,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1992,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1992,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1992,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 2.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1991,3)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1992,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1992,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1992,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1992,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1991,3)
<Distributed chunk2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between e[i] (1993:4) and e[i-1] (1993:4)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1991,3)
<Remainder, Distributed chunk2>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1991,3)
<Peeled loop for vectorization, Distributed chunk3>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1991,3)
<Distributed chunk3>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1994,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1994,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1994,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1994,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 2.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1991,3)
<Remainder loop for vectorization, Distributed chunk3>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1994,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1994,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1994,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1994,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1990,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1979,1):remark #34051: REGISTER ALLOCATION : [s222] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1979

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm7]
        
    Routine temporaries
        Total         :     101
            Global    :      28
            Local     :      73
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s231()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s231()) [39/176=22.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2008,1)
  -> (2015,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2016,12) clock(void)
  -> EXTERN: (2024,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2026,10) clock(void)
  -> EXTERN: (2028,2) printf(const char *__restrict__, ...)
  -> (2029,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4)
<Multiversioned v1>
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25420: Collapsed with loop at line 2019 
   remark #25228: Loop multiversioned for Data Dependence
   remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2021,5) ]
   remark #15388: vectorization support: reference aa[j-1][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2021,16) ]
   remark #15388: vectorization support: reference bb[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2021,31) ]
   remark #15305: vectorization support: vector length 4   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15399: vectorization support: unroll factor set to 4   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15301: PERMUTED LOOP WAS VECTORIZED   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15448: unmasked aligned unit stride loads: 2    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15449: unmasked aligned unit stride stores: 1    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15475: --- begin vector cost summary ---   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15476: scalar cost: 6    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15477: vector cost: 1.250    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15478: estimated potential speedup: 4.800    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #15488: --- end vector cost summary ---   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4) ]
   remark #25015: Estimate of max trip count of loop=4080

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2019,3)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2020,4)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2018,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2008,1):remark #34051: REGISTER ALLOCATION : [s231] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2008

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      43
            Global    :      21
            Local     :      22
        Regenerable   :      23
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s232()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s232()) [40/176=22.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2036,1)
  -> (2044,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2045,12) clock(void)
  -> EXTERN: (2053,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2055,10) clock(void)
  -> EXTERN: (2057,2) printf(const char *__restrict__, ...)
  -> (2058,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2048,3)
   remark #25261: Invariant Condition eliminated(Proven True) at line 2049
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2049,4)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between aa[j][i] (2050:5) and aa[j][i-1] (2050:5)
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=255
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2049,4)
   <Remainder, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=255
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2049,4)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=255
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2049,4)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=255
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2047,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2036,1):remark #34051: REGISTER ALLOCATION : [s232] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2036

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      78
            Global    :      33
            Local     :      45
        Regenerable   :      24
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1232()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1232()) [41/176=23.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2063,1)
  -> (2071,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2072,12) clock(void)
  -> EXTERN: (2080,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2082,10) clock(void)
  -> EXTERN: (2084,2) printf(const char *__restrict__, ...)
  -> (2085,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2075,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2076,4)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <aa[i][j]>, stride is 256   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2077,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <bb[i][j]>, stride is 256   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2077,16) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <cc[i][j]>, stride is 256   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2077,27) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15452: unmasked strided loads: 2 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 27.500 
      remark #15478: estimated potential speedup: 0.220 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=256
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2076,4)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=256
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2074,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2063,1):remark #34051: REGISTER ALLOCATION : [s1232] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2063

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      59
            Global    :      30
            Local     :      29
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s233()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s233()) [42/176=23.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2092,1)
  -> (2100,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2101,12) clock(void)
  -> EXTERN: (2112,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2114,10) clock(void)
  -> EXTERN: (2116,2) printf(const char *__restrict__, ...)
  -> (2117,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2105,4)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2105,4) ]

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2104,3)
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2106,5) ]
      remark #15388: vectorization support: reference aa[j-1][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2106,16) ]
      remark #15388: vectorization support: reference cc[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2106,29) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 2.540 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2104,3)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2104,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2106,5) ]
      remark #15388: vectorization support: reference aa[j-1][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2106,16) ]
      remark #15388: vectorization support: reference cc[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2106,29) ]
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.909
      remark #25436: completely unrolled by 4  
   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2108,4)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2108,4) ]

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2104,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between bb[j][i] (2109:5) and bb[j][i-1] (2109:5)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2104,3)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2104,3)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2104,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2103,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2092,1):remark #34051: REGISTER ALLOCATION : [s233] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2092

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      70
            Global    :      28
            Local     :      42
        Regenerable   :      23
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2233()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2233()) [43/176=24.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2122,1)
  -> (2130,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2131,12) clock(void)
  -> EXTERN: (2142,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2144,10) clock(void)
  -> EXTERN: (2146,2) printf(const char *__restrict__, ...)
  -> (2147,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2135,4)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2135,4) ]

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2134,3)
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2136,5) ]
      remark #15388: vectorization support: reference aa[j-1][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2136,16) ]
      remark #15388: vectorization support: reference cc[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2136,29) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 2.540 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2134,3)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2134,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2136,5) ]
      remark #15388: vectorization support: reference aa[j-1][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2136,16) ]
      remark #15388: vectorization support: reference cc[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2136,29) ]
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.909
      remark #25436: completely unrolled by 4  
   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2134,3)
<Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2138,4)
      remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2139,5) ]
      remark #15388: vectorization support: reference bb[i-1][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2139,16) ]
      remark #15388: vectorization support: reference cc[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2139,29) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 2.540 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2138,4)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2138,4)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference bb[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2139,5) ]
      remark #15388: vectorization support: reference bb[i-1][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2139,16) ]
      remark #15388: vectorization support: reference cc[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2139,29) ]
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.909
      remark #25436: completely unrolled by 4  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2133,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2122,1):remark #34051: REGISTER ALLOCATION : [s2233] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2122

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      80
            Global    :      26
            Local     :      54
        Regenerable   :      23
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s235()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s235()) [44/176=25.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2153,1)
  -> (2161,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2162,12) clock(void)
  -> EXTERN: (2171,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2173,10) clock(void)
  -> EXTERN: (2175,2) printf(const char *__restrict__, ...)
  -> (2176,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2165,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2166,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2166,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2166,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2166,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 4.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=32
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2167,4)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2167,4) ]

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2165,3)
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2168,5) ]
      remark #15388: vectorization support: reference aa[j-1][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2168,16) ]
      remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2168,40) ]
      remark #15388: vectorization support: reference bb[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2168,29) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 4.500 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2164,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2153,1):remark #34051: REGISTER ALLOCATION : [s235] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2153

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      56
            Global    :      26
            Local     :      30
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s241()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s241()) [45/176=25.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2183,1)
  -> (2191,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2192,12) clock(void)
  -> EXTERN: (2199,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2201,10) clock(void)
  -> EXTERN: (2203,2) printf(const char *__restrict__, ...)
  -> (2204,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2195,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between a[i+1] (2197:4) and a[i] (2196:4)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2194,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2183,1):remark #34051: REGISTER ALLOCATION : [s241] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2183

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      45
            Global    :      20
            Local     :      25
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s242(float, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s242(float, float)) [46/176=26.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2212,1)
  -> (2219,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2220,12) clock(void)
  -> EXTERN: (2226,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2228,10) clock(void)
  -> EXTERN: (2230,2) printf(const char *__restrict__, ...)
  -> (2231,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2223,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (2224:4) and a[i-1] (2224:4)
   remark #25439: unrolled with remainder by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2223,3)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2222,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2212,1):remark #34051: REGISTER ALLOCATION : [s242] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2212

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      69
            Global    :      27
            Local     :      42
        Regenerable   :      24
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :      10 [7.99e+04 ~ 0.0%]
            Writes    :       9 [2.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s243()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s243()) [47/176=26.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2238,1)
  -> (2246,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2247,12) clock(void)
  -> EXTERN: (2255,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2257,10) clock(void)
  -> EXTERN: (2259,2) printf(const char *__restrict__, ...)
  -> (2260,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2250,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between a[i+1] (2253:4) and a[i] (2251:4)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2249,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2238,1):remark #34051: REGISTER ALLOCATION : [s243] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2238

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      46
            Global    :      20
            Local     :      26
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s244()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s244()) [48/176=27.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2267,1)
  -> (2275,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2276,12) clock(void)
  -> EXTERN: (2284,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2286,10) clock(void)
  -> EXTERN: (2288,2) printf(const char *__restrict__, ...)
  -> (2289,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2279,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between a[i+1] (2282:4) and a[i] (2280:4)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2278,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2267,1):remark #34051: REGISTER ALLOCATION : [s244] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2267

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      47
            Global    :      20
            Local     :      27
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1244()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1244()) [49/176=27.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2294,1)
  -> (2302,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2303,12) clock(void)
  -> EXTERN: (2310,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2312,10) clock(void)
  -> EXTERN: (2314,2) printf(const char *__restrict__, ...)
  -> (2315,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2306,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between a[i+1] (2308:4) and a[i] (2307:4)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2305,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2294,1):remark #34051: REGISTER ALLOCATION : [s1244] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      47
            Global    :      20
            Local     :      27
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2244()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2244()) [50/176=28.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2320,1)
  -> (2328,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2329,12) clock(void)
  -> EXTERN: (2336,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2338,10) clock(void)
  -> EXTERN: (2340,2) printf(const char *__restrict__, ...)
  -> (2341,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2332,3)
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2333,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2333,13) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2333,20) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2334,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2334,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2334,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 4.320 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2332,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2333,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2333,13) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2333,20) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2334,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2334,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2334,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.417
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2332,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2331,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2320,1):remark #34051: REGISTER ALLOCATION : [s2244] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2320

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm11]
        
    Routine temporaries
        Total         :      75
            Global    :      23
            Local     :      52
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s251()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s251()) [51/176=29.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2348,1)
  -> (2356,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2357,12) clock(void)
  -> EXTERN: (2365,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2367,10) clock(void)
  -> EXTERN: (2369,2) printf(const char *__restrict__, ...)
  -> (2370,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2361,3)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2362,8) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2362,15) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2362,22) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2363,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.036
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 3.710 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2360,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2348,1):remark #34051: REGISTER ALLOCATION : [s251] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2348

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      54
            Global    :      20
            Local     :      34
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1251()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1251()) [52/176=29.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2375,1)
  -> (2383,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2384,12) clock(void)
  -> EXTERN: (2393,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2395,10) clock(void)
  -> EXTERN: (2397,2) printf(const char *__restrict__, ...)
  -> (2398,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2388,3)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2389,8) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2389,13) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2390,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2390,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2390,16) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2391,4) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2391,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.031
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 4.240 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2387,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2375,1):remark #34051: REGISTER ALLOCATION : [s1251] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2375

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      48
            Global    :      20
            Local     :      28
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2251()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2251()) [53/176=30.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2403,1)
  -> (2411,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2412,12) clock(void)
  -> EXTERN: (2421,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2423,10) clock(void)
  -> EXTERN: (2425,2) printf(const char *__restrict__, ...)
  -> (2426,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2416,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between s (2417:4) and s (2418:4)
   remark #15346: vector dependence: assumed FLOW dependence between s (2418:4) and s (2417:4)
   remark #15346: vector dependence: assumed FLOW dependence between s (2418:4) and s (2417:4)
   remark #15346: vector dependence: assumed ANTI dependence between s (2417:4) and s (2418:4)
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2416,3)
<Distributed chunk2>
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2419,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2419,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2419,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2414,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2403,1):remark #34051: REGISTER ALLOCATION : [s2251] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2403

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      53
            Global    :      22
            Local     :      31
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s3251()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s3251()) [54/176=30.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2431,1)
  -> (2438,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2439,12) clock(void)
  -> EXTERN: (2447,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2449,10) clock(void)
  -> EXTERN: (2451,2) printf(const char *__restrict__, ...)
  -> (2452,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2442,3)
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2443,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2443,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2443,18) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2444,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2444,13) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2444,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2445,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2445,13) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2445,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 4.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=3999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2442,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2443,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2443,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2443,18) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2444,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2444,13) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2444,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2445,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2445,13) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2445,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.270
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2442,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2441,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2431,1):remark #34051: REGISTER ALLOCATION : [s3251] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2431

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm13]
        
    Routine temporaries
        Total         :      78
            Global    :      20
            Local     :      58
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s252()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s252()) [55/176=31.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2460,1)
  -> (2467,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2468,12) clock(void)
  -> EXTERN: (2478,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2480,10) clock(void)
  -> EXTERN: (2482,2) printf(const char *__restrict__, ...)
  -> (2483,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2473,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between t (2475:4) and t (2476:4)
   remark #15346: vector dependence: assumed FLOW dependence between t (2476:4) and t (2475:4)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2471,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2460,1):remark #34051: REGISTER ALLOCATION : [s252] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2460

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      44
            Global    :      21
            Local     :      23
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s253()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s253()) [56/176=31.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2491,1)
  -> (2499,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2500,12) clock(void)
  -> EXTERN: (2511,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2513,10) clock(void)
  -> EXTERN: (2515,2) printf(const char *__restrict__, ...)
  -> (2516,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2504,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2506,9) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2506,16) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2506,23) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2507,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2507,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2508,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2508,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.069
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 7.250 
   remark #15478: estimated potential speedup: 4.270 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2503,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2491,1):remark #34051: REGISTER ALLOCATION : [s253] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2491

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm5]
        
    Routine temporaries
        Total         :      49
            Global    :      20
            Local     :      29
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s254()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s254()) [57/176=32.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2523,1)
  -> (2531,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2532,12) clock(void)
  -> EXTERN: (2541,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2543,10) clock(void)
  -> EXTERN: (2545,2) printf(const char *__restrict__, ...)
  -> (2546,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2537,3)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2537,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,12) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2539,8) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 2.750 
   remark #15478: estimated potential speedup: 2.900 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2537,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,12) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2539,8) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2535,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2538,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2523,1):remark #34051: REGISTER ALLOCATION : [s254] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2523

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :      77
            Global    :      26
            Local     :      51
        Regenerable   :      26
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s255()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s255()) [58/176=33.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2553,1)
  -> (2561,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2562,12) clock(void)
  -> EXTERN: (2573,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2575,10) clock(void)
  -> EXTERN: (2577,2) printf(const char *__restrict__, ...)
  -> (2578,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2568,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x (2569:4) and x (2571:4)
   remark #15346: vector dependence: assumed FLOW dependence between x (2571:4) and x (2569:4)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2565,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2553,1):remark #34051: REGISTER ALLOCATION : [s255] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2553

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      49
            Global    :      23
            Local     :      26
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s256()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s256()) [59/176=33.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2585,1)
  -> (2593,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2594,12) clock(void)
  -> EXTERN: (2603,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2605,10) clock(void)
  -> EXTERN: (2607,2) printf(const char *__restrict__, ...)
  -> (2608,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2597,3)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2598,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between a[j] (2599:5) and a[j-1] (2599:5)
      remark #15346: vector dependence: assumed ANTI dependence between a[j-1] (2599:5) and a[j] (2599:5)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2598,4)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2596,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2585,1):remark #34051: REGISTER ALLOCATION : [s256] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2585

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      54
            Global    :      24
            Local     :      30
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s257()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s257()) [60/176=34.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2615,1)
  -> (2623,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2624,12) clock(void)
  -> EXTERN: (2633,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2635,10) clock(void)
  -> EXTERN: (2637,2) printf(const char *__restrict__, ...)
  -> (2638,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2627,3)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2628,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between a[i] (2629:5) and a[i] (2630:5)
      remark #15346: vector dependence: assumed ANTI dependence between a[i] (2630:5) and a[i] (2629:5)
      remark #25438: unrolled without remainder by 2  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2626,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2615,1):remark #34051: REGISTER ALLOCATION : [s257] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2615

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :      50
            Global    :      26
            Local     :      24
        Regenerable   :      23
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s258()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s258()) [61/176=34.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2643,1)
  -> (2651,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2652,12) clock(void)
  -> EXTERN: (2664,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2666,10) clock(void)
  -> EXTERN: (2668,2) printf(const char *__restrict__, ...)
  -> (2669,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2657,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between s (2659:5) and s (2661:4)
   remark #15346: vector dependence: assumed ANTI dependence between s (2661:4) and s (2659:5)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2655,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2643,1):remark #34051: REGISTER ALLOCATION : [s258] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2643

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      47
            Global    :      23
            Local     :      24
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s261()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s261()) [62/176=35.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2676,1)
  -> (2684,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2685,12) clock(void)
  -> EXTERN: (2695,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2697,10) clock(void)
  -> EXTERN: (2699,2) printf(const char *__restrict__, ...)
  -> (2700,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2689,3)
<Peeled loop for vectorization, Distributed chunk1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2689,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2693,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2692,8) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2692,15) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.390 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2689,3)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2693,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2692,8) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2692,15) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2689,3)
<Peeled loop for vectorization, Distributed chunk2>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2689,3)
<Distributed chunk2>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2691,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2690,8) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2690,15) ]
   remark #15389: vectorization support: reference c[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2691,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.750 
   remark #15478: estimated potential speedup: 3.260 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2689,3)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2691,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2690,8) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2690,15) ]
   remark #15389: vectorization support: reference c[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2691,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2688,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2676,1):remark #34051: REGISTER ALLOCATION : [s261] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2676

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm7]
        
    Routine temporaries
        Total         :      89
            Global    :      26
            Local     :      63
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s271()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s271()) [63/176=35.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2705,1)
  -> (2713,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2714,12) clock(void)
  -> EXTERN: (2722,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2724,10) clock(void)
  -> EXTERN: (2726,2) printf(const char *__restrict__, ...)
  -> (2727,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2717,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2719,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2719,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2719,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2719,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 25 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 6.660 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2716,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2705,1):remark #34051: REGISTER ALLOCATION : [s271] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2705

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      51
            Global    :      21
            Local     :      30
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s272(float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s272(float)) [64/176=36.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2734,1)
  -> (2742,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2743,12) clock(void)
  -> EXTERN: (2752,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2754,10) clock(void)
  -> EXTERN: (2756,2) printf(const char *__restrict__, ...)
  -> (2757,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2746,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2748,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2748,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2748,13) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2748,20) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2749,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2749,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2749,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2749,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.120
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 7 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 6.250 
   remark #15478: estimated potential speedup: 4.950 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2745,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2734,1):remark #34051: REGISTER ALLOCATION : [s272] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2734

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      51
            Global    :      22
            Local     :      29
        Regenerable   :      22
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       2 [1.99e+05 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s273()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s273()) [65/176=36.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2764,1)
  -> (2772,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2773,12) clock(void)
  -> EXTERN: (2782,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2784,10) clock(void)
  -> EXTERN: (2786,2) printf(const char *__restrict__, ...)
  -> (2787,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2776,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2777,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2777,4) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2777,12) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2777,19) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2779,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2779,5) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2779,13) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2779,20) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2780,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2780,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2780,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2780,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 8 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 43 
   remark #15477: vector cost: 7.750 
   remark #15478: estimated potential speedup: 5.540 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2775,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2764,1):remark #34051: REGISTER ALLOCATION : [s273] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2764

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      49
            Global    :      21
            Local     :      28
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s274()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s274()) [66/176=37.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2794,1)
  -> (2802,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2803,12) clock(void)
  -> EXTERN: (2814,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2816,10) clock(void)
  -> EXTERN: (2818,2) printf(const char *__restrict__, ...)
  -> (2819,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2806,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2807,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2807,11) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2807,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2807,25) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2809,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2809,12) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2809,19) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2811,5) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2811,12) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2811,19) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2811,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 7 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 8.250 
   remark #15478: estimated potential speedup: 4.360 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2805,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2794,1):remark #34051: REGISTER ALLOCATION : [s274] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2794

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      52
            Global    :      22
            Local     :      30
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s275()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s275()) [67/176=38.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2826,1)
  -> (2834,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2835,12) clock(void)
  -> EXTERN: (2845,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2847,10) clock(void)
  -> EXTERN: (2849,2) printf(const char *__restrict__, ...)
  -> (2850,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2840,5)
   remark #25088: Preprocess Loopnests: Sinking if-Stmt into Inner Loop to Create Perfect Nest 
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2840,5) ]

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2838,3)
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2841,6) ]
      remark #15388: vectorization support: reference aa[j-1][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2841,17) ]
      remark #15388: vectorization support: reference bb[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2841,30) ]
      remark #15388: vectorization support: reference cc[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2841,41) ]
      remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2841,6) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 25 
      remark #15477: vector cost: 4.750 
      remark #15478: estimated potential speedup: 5.260 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2837,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2826,1):remark #34051: REGISTER ALLOCATION : [s275] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2826

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      56
            Global    :      24
            Local     :      32
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2275()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2275()) [68/176=38.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2855,1)
  -> (2862,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2863,12) clock(void)
  -> EXTERN: (2872,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2874,10) clock(void)
  -> EXTERN: (2876,2) printf(const char *__restrict__, ...)
  -> (2877,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25420: Collapsed with loop at line 2866 
   remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2868,5) ]
   remark #15388: vectorization support: reference aa[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2868,16) ]
   remark #15388: vectorization support: reference bb[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2868,27) ]
   remark #15388: vectorization support: reference cc[j][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2868,38) ]
   remark #15305: vectorization support: vector length 4   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15399: vectorization support: unroll factor set to 4   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15301: PARTIAL LOOP WAS VECTORIZED   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15448: unmasked aligned unit stride loads: 3    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15449: unmasked aligned unit stride stores: 1    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15475: --- begin vector cost summary ---   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15476: scalar cost: 9    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15477: vector cost: 2.000    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15478: estimated potential speedup: 4.500    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #15488: --- end vector cost summary ---   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2867,4) ]
   remark #25015: Estimate of max trip count of loop=4096

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2866,3)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2866,3)
<Distributed chunk2>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2870,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2870,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2870,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2870,25) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 4.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=32
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2865,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2855,1):remark #34051: REGISTER ALLOCATION : [s2275] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2855

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      57
            Global    :      21
            Local     :      36
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s276()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s276()) [69/176=39.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2884,1)
  -> (2892,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2893,12) clock(void)
  -> EXTERN: (2904,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2906,10) clock(void)
  -> EXTERN: (2908,2) printf(const char *__restrict__, ...)
  -> (2909,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2897,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2899,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2899,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2899,20) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2901,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2901,13) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2901,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.022
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 5.750 
   remark #15478: estimated potential speedup: 5.040 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2896,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2884,1):remark #34051: REGISTER ALLOCATION : [s276] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2884

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm13]
        
    Routine temporaries
        Total         :      67
            Global    :      25
            Local     :      42
        Regenerable   :      27
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s277()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s277()) [70/176=39.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2915,1)
  -> (2923,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2924,12) clock(void)
  -> EXTERN: (2940,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2942,10) clock(void)
  -> EXTERN: (2944,2) printf(const char *__restrict__, ...)
  -> (2945,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2927,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between b[i+1] (2936:5) and b[i] (2931:5)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2926,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2915,1):remark #34051: REGISTER ALLOCATION : [s277] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2915

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      47
            Global    :      23
            Local     :      24
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s278()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s278()) [71/176=40.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2952,1)
  -> (2960,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2961,12) clock(void)
  -> EXTERN: (2975,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (2977,10) clock(void)
  -> EXTERN: (2979,2) printf(const char *__restrict__, ...)
  -> (2980,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2964,3)
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2971,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2971,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2971,19) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2971,26) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2968,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2968,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2968,19) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2968,26) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2973,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2973,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2973,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2973,25) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2971,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2968,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 12 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 41 
   remark #15477: vector cost: 10.500 
   remark #15478: estimated potential speedup: 3.900 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2963,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2952,1):remark #34051: REGISTER ALLOCATION : [s278] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2952

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm8]
        
    Routine temporaries
        Total         :      57
            Global    :      22
            Local     :      35
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s279()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s279()) [72/176=40.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2987,1)
  -> (2995,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (2996,12) clock(void)
  -> EXTERN: (3014,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3016,10) clock(void)
  -> EXTERN: (3018,2) printf(const char *__restrict__, ...)
  -> (3019,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2999,3)
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3010,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3010,12) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3010,19) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3010,26) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3003,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3003,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3003,19) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3003,26) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3007,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3007,4) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3007,12) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3007,19) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3012,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3012,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3012,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3012,25) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3010,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3003,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 16 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 58 
   remark #15477: vector cost: 14.750 
   remark #15478: estimated potential speedup: 3.930 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2998,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(2987,1):remark #34051: REGISTER ALLOCATION : [s279] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:2987

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm12]
        
    Routine temporaries
        Total         :      65
            Global    :      22
            Local     :      43
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1279()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1279()) [73/176=41.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3024,1)
  -> (3032,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3033,12) clock(void)
  -> EXTERN: (3043,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3045,10) clock(void)
  -> EXTERN: (3047,2) printf(const char *__restrict__, ...)
  -> (3048,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3036,3)
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3039,6) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3039,6) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3039,14) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3039,21) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 25 
   remark #15477: vector cost: 5.250 
   remark #15478: estimated potential speedup: 4.760 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3035,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3024,1):remark #34051: REGISTER ALLOCATION : [s1279] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3024

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      55
            Global    :      21
            Local     :      34
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2710(float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2710(float)) [74/176=42.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3055,1)
  -> (3063,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3064,12) clock(void)
  -> EXTERN: (3084,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3086,10) clock(void)
  -> EXTERN: (3088,2) printf(const char *__restrict__, ...)
  -> (3089,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3067,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3069,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3069,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3069,13) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3069,20) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3071,6) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3071,6) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3071,14) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3071,21) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3076,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3076,12) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3076,19) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3076,26) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3078,6) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3078,13) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3078,20) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3078,27) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3080,6) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3080,6) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3080,14) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3080,21) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3076,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3078,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 16 
   remark #15449: unmasked aligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 57 
   remark #15477: vector cost: 16.500 
   remark #15478: estimated potential speedup: 3.450 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3066,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3055,1):remark #34051: REGISTER ALLOCATION : [s2710] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3055

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm10]
        
    Routine temporaries
        Total         :      65
            Global    :      29
            Local     :      36
        Regenerable   :      24
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+05 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2711()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2711()) [75/176=42.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3096,1)
  -> (3103,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3104,12) clock(void)
  -> EXTERN: (3112,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3114,10) clock(void)
  -> EXTERN: (3116,2) printf(const char *__restrict__, ...)
  -> (3117,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3107,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3109,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3109,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3109,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3109,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 7.730 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3106,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3096,1):remark #34051: REGISTER ALLOCATION : [s2711] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3096

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      51
            Global    :      21
            Local     :      30
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2712()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2712()) [76/176=43.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3124,1)
  -> (3132,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3133,12) clock(void)
  -> EXTERN: (3141,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3143,10) clock(void)
  -> EXTERN: (3145,2) printf(const char *__restrict__, ...)
  -> (3146,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3136,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3138,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3138,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3138,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3138,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 26 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 6.930 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3135,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3124,1):remark #34051: REGISTER ALLOCATION : [s2712] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm7]
        
    Routine temporaries
        Total         :      52
            Global    :      20
            Local     :      32
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s281()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s281()) [77/176=43.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3153,1)
  -> (3162,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3163,12) clock(void)
  -> EXTERN: (3172,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3174,10) clock(void)
  -> EXTERN: (3176,2) printf(const char *__restrict__, ...)
  -> (3177,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3167,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between a[i+31999] (3168:4) and a[i] (3169:4)
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (3169:4) and a[i+31999] (3168:4)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3166,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3153,1):remark #34051: REGISTER ALLOCATION : [s281] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3153

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      48
            Global    :      22
            Local     :      26
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1281()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1281()) [78/176=44.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3182,1)
  -> (3191,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3192,12) clock(void)
  -> EXTERN: (3201,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3203,10) clock(void)
  -> EXTERN: (3205,2) printf(const char *__restrict__, ...)
  -> (3206,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3196,3)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3197,8) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3197,13) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3197,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3197,23) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3197,28) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3198,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3199,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.048
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 5.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3195,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3182,1):remark #34051: REGISTER ALLOCATION : [s1281] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3182

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      53
            Global    :      21
            Local     :      32
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s291()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s291()) [79/176=44.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3213,1)
  -> (3221,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3222,12) clock(void)
  -> EXTERN: (3231,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3233,10) clock(void)
  -> EXTERN: (3235,2) printf(const char *__restrict__, ...)
  -> (3236,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3227,3)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3227,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,12) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 2.750 
   remark #15478: estimated potential speedup: 2.900 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3227,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,12) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3225,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3228,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3213,1):remark #34051: REGISTER ALLOCATION : [s291] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3213

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :      77
            Global    :      26
            Local     :      51
        Regenerable   :      26
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s292()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s292()) [80/176=45.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3243,1)
  -> (3252,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3253,12) clock(void)
  -> EXTERN: (3264,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3266,10) clock(void)
  -> EXTERN: (3268,2) printf(const char *__restrict__, ...)
  -> (3269,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3259,3)
   remark #15389: vectorization support: reference a[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,4) ]
   remark #15389: vectorization support: reference b[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,12) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,19) ]
   remark #15388: vectorization support: reference b[i-2] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 3.130 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3259,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,4) ]
   remark #15389: vectorization support: reference b[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,12) ]
   remark #15389: vectorization support: reference b[i-1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,19) ]
   remark #15388: vectorization support: reference b[i-2] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.455
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3259,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3256,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3260,12):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3243,1):remark #34051: REGISTER ALLOCATION : [s292] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3243

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :      90
            Global    :      27
            Local     :      63
        Regenerable   :      25
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2101()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2101()) [81/176=46.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3302,1)
  -> (3311,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3312,12) clock(void)
  -> EXTERN: (3318,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3320,10) clock(void)
  -> EXTERN: (3322,2) printf(const char *__restrict__, ...)
  -> (3323,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3315,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <aa[i][i]>, stride is 257   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3316,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <aa[i][i]>, stride is 257   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3316,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <bb[i][i]>, stride is 257   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3316,16) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cc[i][i]>, stride is 257   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3316,27) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15452: unmasked strided loads: 3 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 10.000 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3314,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3302,1):remark #34051: REGISTER ALLOCATION : [s2101] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3302

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      45
            Global    :      21
            Local     :      24
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [5.34e-01 ~ 0.0%]
            Writes    :       1 [5.62e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2102()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2102()) [82/176=46.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3330,1)
  -> (3338,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3339,12) clock(void)
  -> EXTERN: (3348,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3350,10) clock(void)
  -> EXTERN: (3352,2) printf(const char *__restrict__, ...)
  -> (3353,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3343,4)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25420: Collapsed with loop at line 3342 
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3343,4) ]

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3342,3)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3342,3)
<Distributed chunk2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <aa[i][i]>, stride is 257   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3346,4) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3341,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3343,4):remark #34026: call to memset implemented as a call to optimized library version
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3330,1):remark #34051: REGISTER ALLOCATION : [s2102] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3330

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      43
            Global    :      22
            Local     :      21
        Regenerable   :      26
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s2111()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s2111()) [83/176=47.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3360,1)
  -> (3367,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3368,12) clock(void)
  -> EXTERN: (3375,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3377,10) clock(void)
  -> EXTERN: (3379,2) printf(const char *__restrict__, ...)
  -> (3385,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3370,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3371,4)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between aa[j][i] (3372:5) and aa[j][i-1] (3372:5)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3371,4)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3371,4)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3371,4)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3381,2)
   remark #25420: Collapsed with loop at line 3382 
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3383,4) ]
   remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3383,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2048

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3382,3)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3369,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3360,1):remark #34051: REGISTER ALLOCATION : [s2111] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3360

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      69
            Global    :      34
            Local     :      35
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s31111()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s31111()) [84/176=47.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3434,1)
  -> (3442,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3443,12) clock(void)
  -> INLINE: (3448,10) test(float *) (isz = 17) (sz = 24)
  -> INLINE: (3449,10) test(float *) (isz = 17) (sz = 24)
  -> INLINE: (3450,10) test(float *) (isz = 17) (sz = 24)
  -> INLINE: (3451,10) test(float *) (isz = 17) (sz = 24)
  -> INLINE: (3452,10) test(float *) (isz = 17) (sz = 24)
  -> INLINE: (3453,10) test(float *) (isz = 17) (sz = 24)
  -> INLINE: (3454,10) test(float *) (isz = 17) (sz = 24)
  -> INLINE: (3455,10) test(float *) (isz = 17) (sz = 24)
  -> EXTERN: (3456,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3458,10) clock(void)
  -> EXTERN: (3460,2) printf(const char *__restrict__, ...)
  -> (3461,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3448,10)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3448,15) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3449,10)
   remark #15388: vectorization support: reference A[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3429,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3450,10)
   remark #15388: vectorization support: reference A[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3429,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3451,10)
   remark #15388: vectorization support: reference A[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3429,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3452,10)
   remark #15388: vectorization support: reference A[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3429,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3453,10)
   remark #15388: vectorization support: reference A[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3429,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3454,10)
   remark #15388: vectorization support: reference A[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3429,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3455,10)
   remark #15388: vectorization support: reference A[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3429,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 6.200
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 0.550 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3446,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3434,1):remark #34051: REGISTER ALLOCATION : [s31111] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3434

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      74
            Global    :      17
            Local     :      57
        Regenerable   :      19
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [0.00e+00 ~ 0.0%]
            Writes    :       7 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s313()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s313()) [85/176=48.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3497,1)
  -> (3505,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3506,12) clock(void)
  -> EXTERN: (3514,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3516,10) clock(void)
  -> EXTERN: (3518,2) printf(const char *__restrict__, ...)
  -> (3520,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3511,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3512,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3512,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.969
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3509,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3497,1):remark #34051: REGISTER ALLOCATION : [s313] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3497

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      58
            Global    :      25
            Local     :      33
        Regenerable   :      21
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [6.94e+00 ~ 0.0%]
            Writes    :       7 [9.99e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s315()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s315()) [86/176=48.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3559,1)
  -> (3567,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3570,12) clock(void)
  -> EXTERN: (3584,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3586,10) clock(void)
  -> EXTERN: (3588,2) printf(const char *__restrict__, ...)
  -> (3590,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3568,2)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3569,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.013
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 19.000 
   remark #15478: estimated potential speedup: 1.050 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3577,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3579,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.548
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 7.750 
   remark #15478: estimated potential speedup: 2.700 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3574,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3559,1):remark #34051: REGISTER ALLOCATION : [s315] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3559

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm10]
        
    Routine temporaries
        Total         :     105
            Global    :      35
            Local     :      70
        Regenerable   :      31
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [1.99e+05 ~ 0.0%]
            Writes    :       2 [1.99e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s318(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s318(int)) [87/176=49.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3660,1)
  -> (3669,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3670,12) clock(void)
  -> EXTERN: (3689,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3691,10) clock(void)
  -> EXTERN: (3693,2) printf(const char *__restrict__, ...)
  -> (3695,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3679,3)
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[k]>, stride is unknown to compiler   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3680,12) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[k]>, stride is unknown to compiler   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3684,14) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.762
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 1.140 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3679,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3674,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3660,1):remark #34051: REGISTER ALLOCATION : [s318] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3660

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     156
            Global    :      44
            Local     :     112
        Regenerable   :      30
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       6 [3.00e+05 ~ 0.0%]
            Writes    :       6 [2.00e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s319()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s319()) [88/176=50.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3702,1)
  -> (3710,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3711,12) clock(void)
  -> EXTERN: (3722,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3724,10) clock(void)
  -> EXTERN: (3726,2) printf(const char *__restrict__, ...)
  -> (3728,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3716,3)
   remark #25427: Loop Statements Reordered
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3719,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3719,11) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3719,18) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3717,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3717,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3717,18) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3718,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3720,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 3.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 22 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 4.390 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3714,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3702,1):remark #34051: REGISTER ALLOCATION : [s319] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3702

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      57
            Global    :      22
            Local     :      35
        Regenerable   :      21
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [3.97e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s3110()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s3110()) [89/176=50.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3735,1)
  -> (3744,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3745,12) clock(void)
  -> EXTERN: (3763,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3765,10) clock(void)
  -> EXTERN: (3767,2) printf(const char *__restrict__, ...)
  -> (3769,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3753,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3754,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between max (3755:5) and max (3756:6)
      remark #15346: vector dependence: assumed FLOW dependence between max (3756:6) and max (3755:5)
      remark #15346: vector dependence: assumed FLOW dependence between max (3756:6) and max (3755:5)
      remark #15346: vector dependence: assumed ANTI dependence between max (3755:5) and max (3756:6)
      remark #25438: unrolled without remainder by 2  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3749,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3735,1):remark #34051: REGISTER ALLOCATION : [s3110] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3735

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      55
            Global    :      29
            Local     :      26
        Regenerable   :      22
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       4 [7.80e+04 ~ 0.0%]
            Writes    :       4 [2.34e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s13110()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s13110()) [90/176=51.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3774,1)
  -> (3782,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3783,12) clock(void)
  -> EXTERN: (3799,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3801,10) clock(void)
  -> EXTERN: (3803,2) printf(const char *__restrict__, ...)
  -> (3805,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3791,3)
   remark #25420: Collapsed with loop at line 3792 
   remark #15388: vectorization support: reference aa[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3793,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.456
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 1.880 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4096

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3792,4)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3787,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3774,1):remark #34051: REGISTER ALLOCATION : [s13110] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3774

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      53
            Global    :      21
            Local     :      32
        Regenerable   :      21
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [7.83e+04 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s3111()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s3111()) [91/176=51.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3812,1)
  -> (3820,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3821,12) clock(void)
  -> EXTERN: (3831,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3833,10) clock(void)
  -> EXTERN: (3835,2) printf(const char *__restrict__, ...)
  -> (3837,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3826,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3828,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.646
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 22 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 7.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3824,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3812,1):remark #34051: REGISTER ALLOCATION : [s3111] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3812

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm12]
        
    Routine temporaries
        Total         :      62
            Global    :      25
            Local     :      37
        Regenerable   :      21
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s3112()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s3112()) [92/176=52.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3844,1)
  -> (3852,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3853,12) clock(void)
  -> EXTERN: (3862,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3864,10) clock(void)
  -> EXTERN: (3866,2) printf(const char *__restrict__, ...)
  -> (3868,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3858,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum (3859:4) and sum (3859:4)
   remark #15346: vector dependence: assumed FLOW dependence between sum (3859:4) and sum (3859:4)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3856,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3844,1):remark #34051: REGISTER ALLOCATION : [s3112] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3844

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      41
            Global    :      21
            Local     :      20
        Regenerable   :      21
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       2 [1.99e+05 ~ 0.0%]
            Writes    :       2 [1.99e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s3113()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s3113()) [93/176=52.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3875,1)
  -> (3883,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3884,12) clock(void)
  -> EXTERN: (3894,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3896,10) clock(void)
  -> EXTERN: (3898,2) printf(const char *__restrict__, ...)
  -> (3900,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3889,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3890,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.242
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 16 
   remark #15477: vector cost: 8.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3887,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3875,1):remark #34051: REGISTER ALLOCATION : [s3113] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3875

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm11]
        
    Routine temporaries
        Total         :      75
            Global    :      22
            Local     :      53
        Regenerable   :      21
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 0.0%]
            Writes    :       2 [8.19e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s321()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s321()) [94/176=53.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3907,1)
  -> (3915,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3916,12) clock(void)
  -> EXTERN: (3922,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3924,10) clock(void)
  -> EXTERN: (3926,2) printf(const char *__restrict__, ...)
  -> (3927,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3919,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (3920:4) and a[i-1] (3920:4)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3919,3)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3918,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3907,1):remark #34051: REGISTER ALLOCATION : [s321] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3907

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      47
            Global    :      20
            Local     :      27
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s322()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s322()) [95/176=54.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3934,1)
  -> (3942,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3943,12) clock(void)
  -> EXTERN: (3949,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3951,10) clock(void)
  -> EXTERN: (3953,2) printf(const char *__restrict__, ...)
  -> (3954,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3946,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (3947:4) and a[i-1] (3947:4)
   remark #25439: unrolled with remainder by 4  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3946,3)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3945,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3934,1):remark #34051: REGISTER ALLOCATION : [s322] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3934

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm8]
        
    Routine temporaries
        Total         :      73
            Global    :      24
            Local     :      49
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s323()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s323()) [96/176=54.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3961,1)
  -> (3969,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3970,12) clock(void)
  -> EXTERN: (3977,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3979,10) clock(void)
  -> EXTERN: (3981,2) printf(const char *__restrict__, ...)
  -> (3982,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3973,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between b[i] (3975:4) and b[i-1] (3974:4)
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3972,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3961,1):remark #34051: REGISTER ALLOCATION : [s323] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3961

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      45
            Global    :      20
            Local     :      25
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s331()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s331()) [97/176=55.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3989,1)
  -> (3997,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3998,12) clock(void)
  -> EXTERN: (4010,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4012,10) clock(void)
  -> EXTERN: (4014,2) printf(const char *__restrict__, ...)
  -> (4016,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4004,3)
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.466
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 7.250 
   remark #15478: estimated potential speedup: 2.620 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4000,2)
   remark #25460: No loop optimizations reported
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4002,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3989,1):remark #34051: REGISTER ALLOCATION : [s331] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3989

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r9 r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      65
            Global    :      39
            Local     :      26
        Regenerable   :      27
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       3 [5.96e+05 ~ 0.0%]
            Writes    :       5 [2.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s332(float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s332(float)) [98/176=55.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4030,1)
  -> (4038,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4039,12) clock(void)
  -> EXTERN: (4056,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4058,10) clock(void)
  -> EXTERN: (4060,2) printf(const char *__restrict__, ...)
  -> (4062,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4047,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4048,4) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4044,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4030,1):remark #34051: REGISTER ALLOCATION : [s332] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4030

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      47
            Global    :      24
            Local     :      23
        Regenerable   :      23
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       4 [3.97e+05 ~ 3.8%]
            Writes    :       4 [1.99e+05 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s341()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s341()) [99/176=56.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4070,1)
  -> EXTERN: (4077,12) clock(void)
  -> (4079,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4080,12) clock(void)
  -> EXTERN: (4091,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4093,10) clock(void)
  -> EXTERN: (4095,2) printf(const char *__restrict__, ...)
  -> (4096,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4085,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j (4087:5) and j (4087:5)
   remark #15346: vector dependence: assumed FLOW dependence between j (4087:5) and j (4087:5)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4083,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4070,1):remark #34051: REGISTER ALLOCATION : [s341] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4070

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      42
            Global    :      24
            Local     :      18
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s342()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s342()) [100/176=56.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4103,1)
  -> EXTERN: (4110,12) clock(void)
  -> (4112,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4113,12) clock(void)
  -> EXTERN: (4124,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4126,10) clock(void)
  -> EXTERN: (4128,2) printf(const char *__restrict__, ...)
  -> (4129,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4118,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j (4120:5) and j (4120:5)
   remark #15346: vector dependence: assumed FLOW dependence between j (4120:5) and j (4120:5)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4116,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4103,1):remark #34051: REGISTER ALLOCATION : [s342] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4103

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      44
            Global    :      22
            Local     :      22
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s343()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s343()) [101/176=57.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4136,1)
  -> EXTERN: (4143,12) clock(void)
  -> (4145,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4146,12) clock(void)
  -> EXTERN: (4159,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4161,10) clock(void)
  -> EXTERN: (4163,2) printf(const char *__restrict__, ...)
  -> (4164,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4151,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4152,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between k (4154:6) and k (4154:6)
      remark #15346: vector dependence: assumed FLOW dependence between k (4154:6) and k (4154:6)
      remark #15346: vector dependence: assumed ANTI dependence between k (4154:6) and k (4154:6)
      remark #25438: unrolled without remainder by 2  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4149,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4136,1):remark #34051: REGISTER ALLOCATION : [s343] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4136

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      47
            Global    :      25
            Local     :      22
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s351()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s351()) [102/176=58.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4171,1)
  -> EXTERN: (4177,12) clock(void)
  -> (4179,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4180,12) clock(void)
  -> EXTERN: (4191,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4193,10) clock(void)
  -> EXTERN: (4195,2) printf(const char *__restrict__, ...)
  -> (4196,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4184,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4185,4)
      remark #15389: vectorization support: reference a[i+_2] has unaligned access
      remark #15389: vectorization support: reference a[i+_2] has unaligned access
      remark #15389: vectorization support: reference b[i+_2] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4185,20) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.250 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4185,4)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4183,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4171,1):remark #34051: REGISTER ALLOCATION : [s351] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4171

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      51
            Global    :      25
            Local     :      26
        Regenerable   :      23
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       3 [2.00e+06 ~ 0.0%]
            Writes    :       3 [1.88e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1351()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1351()) [103/176=58.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4201,1)
  -> EXTERN: (4206,12) clock(void)
  -> (4208,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4209,12) clock(void)
  -> EXTERN: (4221,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4223,10) clock(void)
  -> EXTERN: (4225,2) printf(const char *__restrict__, ...)
  -> (4226,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4215,3)
   remark #15388: vectorization support: reference *A has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4216,5) ]
   remark #15388: vectorization support: reference *B has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4216,10) ]
   remark #15388: vectorization support: reference *C has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4216,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4211,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4201,1):remark #34051: REGISTER ALLOCATION : [s1351] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4201

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      46
            Global    :      20
            Local     :      26
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.66e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s352()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s352()) [104/176=59.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4233,1)
  -> EXTERN: (4239,12) clock(void)
  -> (4241,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4242,12) clock(void)
  -> EXTERN: (4251,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4253,10) clock(void)
  -> EXTERN: (4255,2) printf(const char *__restrict__, ...)
  -> (4257,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4247,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4248,4)
      remark #15389: vectorization support: reference a[i+_2] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4248,16) ]
      remark #15389: vectorization support: reference b[i+_2] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4248,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.520 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4248,4)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4245,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4233,1):remark #34051: REGISTER ALLOCATION : [s352] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4233

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      54
            Global    :      26
            Local     :      28
        Regenerable   :      23
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.22e+00 ~ 0.0%]
            Writes    :       2 [1.00e+06 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s353(int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s353(int *__restrict__)) [105/176=59.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4264,1)
  -> EXTERN: (4271,12) clock(void)
  -> (4273,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4274,12) clock(void)
  -> EXTERN: (4285,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4287,10) clock(void)
  -> EXTERN: (4289,2) printf(const char *__restrict__, ...)
  -> (4290,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4278,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4279,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4279,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ip[i]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4279,22) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4279,20) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i+1]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4280,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i+1]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4280,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ip[i+1]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4280,26) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+(i+1)*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4280,24) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i+2]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4281,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i+2]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4281,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ip[i+2]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4281,26) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+(i+2)*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4281,24) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i+3]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4282,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i+3]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4282,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ip[i+3]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4282,26) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+(i+3)*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4282,24) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i+4]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4283,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i+4]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4283,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ip[i+4]>, stride is 5   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4283,26) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+(i+4)*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4283,24) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.030
   remark #15452: unmasked strided loads: 10 
   remark #15453: unmasked strided stores: 5 
   remark #15462: unmasked indexed (or gather) loads: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 54 
   remark #15477: vector cost: 165.000 
   remark #15478: estimated potential speedup: 0.320 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4277,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4264,1):remark #34051: REGISTER ALLOCATION : [s353] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4264

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r9 r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :      61
            Global    :      22
            Local     :      39
        Regenerable   :      22
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.99e+05 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s421()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s421()) [106/176=60.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4304,1)
  -> INLINE: (4309,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> (4311,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4312,12) clock(void)
  -> EXTERN: (4320,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4322,10) clock(void)
  -> EXTERN: (4324,2) printf(const char *__restrict__, ...)
  -> (4329,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4309,2)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4309,2)
   remark #15388: vectorization support: reference xx[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(93,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.310 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4309,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference xx[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(93,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4309,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4317,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between xx[i] (4318:4) and a[i] (4318:4)
   remark #15346: vector dependence: assumed ANTI dependence between a[i] (4318:4) and xx[i] (4318:4)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4317,3)
<Remainder>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4326,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between xx[i] (4327:3) and temp (4327:3)
   remark #15346: vector dependence: assumed FLOW dependence between temp (4327:3) and xx[i] (4327:3)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4315,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4304,1):remark #34051: REGISTER ALLOCATION : [s421] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4304

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      77
            Global    :      39
            Local     :      38
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1421()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1421()) [107/176=60.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4334,1)
  -> INLINE: (4339,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> (4341,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4342,12) clock(void)
  -> EXTERN: (4349,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4351,10) clock(void)
  -> EXTERN: (4353,2) printf(const char *__restrict__, ...)
  -> (4358,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4339,2)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4339,2)
   remark #15388: vectorization support: reference xx[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(93,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.310 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4339,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference xx[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(93,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4339,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4346,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4347,4) ]
   remark #15389: vectorization support: reference xx[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4347,11) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4347,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.125
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4346,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4355,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between xx[i] (4356:3) and temp (4356:3)
   remark #15346: vector dependence: assumed FLOW dependence between temp (4356:3) and xx[i] (4356:3)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4345,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4334,1):remark #34051: REGISTER ALLOCATION : [s1421] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4334

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      86
            Global    :      39
            Local     :      47
        Regenerable   :      24
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.66e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s422()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s422()) [108/176=61.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4365,1)
  -> INLINE: (4372,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> (4374,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4375,12) clock(void)
  -> EXTERN: (4383,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4385,10) clock(void)
  -> EXTERN: (4387,2) printf(const char *__restrict__, ...)
  -> (4392,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4372,2)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4380,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference xx[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4381,4) ]
   remark #15388: vectorization support: reference array[i+8] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4381,12) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4381,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.107
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4380,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4389,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between xx[i] (4390:3) and temp (4390:3)
   remark #15346: vector dependence: assumed FLOW dependence between temp (4390:3) and xx[i] (4390:3)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4379,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3):remark #34026: call to memset implemented as a call to optimized library version
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4365,1):remark #34051: REGISTER ALLOCATION : [s422] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4365

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      72
            Global    :      27
            Local     :      45
        Regenerable   :      28
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [3.05e+00 ~ 0.0%]
            Writes    :       5 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s423()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s423()) [109/176=61.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4399,1)
  -> INLINE: (4406,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> (4408,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4409,12) clock(void)
  -> EXTERN: (4414,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4416,10) clock(void)
  -> EXTERN: (4418,2) printf(const char *__restrict__, ...)
  -> (4424,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4406,2)
   remark #15388: vectorization support: reference xx[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(93,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4411,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference array[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4412,4) ]
   remark #15389: vectorization support: reference xx[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4412,17) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4412,25) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.094
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4411,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference array[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4412,4) ]
   remark #15389: vectorization support: reference xx[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4412,17) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4412,25) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4411,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4411,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4411,3)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4421,2)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4422,3) ]
   remark #15388: vectorization support: reference array[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4422,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4410,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4399,1):remark #34051: REGISTER ALLOCATION : [s423] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4399

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      93
            Global    :      36
            Local     :      57
        Regenerable   :      25
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s424()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s424()) [110/176=62.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4431,1)
  -> INLINE: (4439,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> (4441,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4442,12) clock(void)
  -> EXTERN: (4448,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4450,10) clock(void)
  -> EXTERN: (4452,2) printf(const char *__restrict__, ...)
  -> (4457,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4439,2)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4445,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference xx[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4446,4) ]
   remark #15388: vectorization support: reference array[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4446,14) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4446,25) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.107
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4445,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference xx[i+1] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4446,4) ]
   remark #15388: vectorization support: reference array[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4446,14) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4446,25) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4445,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4445,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4445,3)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4454,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between xx[i] (4455:3) and temp (4455:3)
   remark #15346: vector dependence: assumed FLOW dependence between temp (4455:3) and xx[i] (4455:3)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4444,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3):remark #34026: call to memset implemented as a call to optimized library version
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4431,1):remark #34051: REGISTER ALLOCATION : [s424] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4431

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      84
            Global    :      29
            Local     :      55
        Regenerable   :      28
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [6.00e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s431()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s431()) [111/176=63.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4464,1)
  -> (4475,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4476,12) clock(void)
  -> EXTERN: (4482,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4484,10) clock(void)
  -> EXTERN: (4486,2) printf(const char *__restrict__, ...)
  -> (4487,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4479,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4480,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4480,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4480,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4478,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4464,1):remark #34051: REGISTER ALLOCATION : [s431] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4464

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      46
            Global    :      20
            Local     :      26
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.20e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s441()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s441()) [112/176=63.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4494,1)
  -> (4502,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4503,12) clock(void)
  -> EXTERN: (4515,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4517,10) clock(void)
  -> EXTERN: (4519,2) printf(const char *__restrict__, ...)
  -> (4520,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4506,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4508,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4508,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4508,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4508,20) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4510,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4510,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4510,13) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4510,20) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4512,5) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4512,5) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4512,13) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4512,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 34 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 3.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4505,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4494,1):remark #34051: REGISTER ALLOCATION : [s441] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4494

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm7]
        
    Routine temporaries
        Total         :      58
            Global    :      22
            Local     :      36
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s442()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s442()) [113/176=64.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4527,1)
  -> (4535,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4536,12) clock(void)
  -> EXTERN: (4560,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4562,10) clock(void)
  -> EXTERN: (4564,2) printf(const char *__restrict__, ...)
  -> (4565,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4539,3)
   remark #15388: vectorization support: reference indx[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4540,12) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4550,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4550,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4550,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4550,19) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4553,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4553,4) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4553,12) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4553,19) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4556,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4556,4) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4556,12) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4556,19) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4547,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4547,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4547,12) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4547,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 13 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 24.500 
   remark #15478: estimated potential speedup: 1.300 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4538,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4527,1):remark #34051: REGISTER ALLOCATION : [s442] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4527

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm14]
        
    Routine temporaries
        Total         :      75
            Global    :      25
            Local     :      50
        Regenerable   :      27
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s443()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s443()) [114/176=64.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4572,1)
  -> (4580,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4581,12) clock(void)
  -> EXTERN: (4598,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4600,10) clock(void)
  -> EXTERN: (4602,2) printf(const char *__restrict__, ...)
  -> (4603,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4584,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4591,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4591,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4591,19) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4594,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4594,12) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4594,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 5.750 
   remark #15478: estimated potential speedup: 5.390 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4583,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4572,1):remark #34051: REGISTER ALLOCATION : [s443] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4572

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm11]
        
    Routine temporaries
        Total         :      62
            Global    :      22
            Local     :      40
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s451()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s451()) [115/176=65.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4610,1)
  -> (4618,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4619,12) clock(void)
  -> EXTERN: (4623,11) sinf(float)
  -> EXTERN: (4623,24) cosf(float)
  -> EXTERN: (4625,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4627,10) clock(void)
  -> EXTERN: (4629,2) printf(const char *__restrict__, ...)
  -> (4630,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4622,3)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4623,16) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4623,29) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4623,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.013
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 210 
   remark #15477: vector cost: 38.250 
   remark #15478: estimated potential speedup: 5.490 
   remark #15482: vectorized math library calls: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=8000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4621,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4610,1):remark #34051: REGISTER ALLOCATION : [s451] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4610

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0 zmm8]
        
    Routine temporaries
        Total         :      49
            Global    :      23
            Local     :      26
        Regenerable   :      22
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [3.99e+04 ~ 0.0%]
            Writes    :       7 [3.98e+04 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s452()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s452()) [116/176=65.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4637,1)
  -> (4645,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4646,12) clock(void)
  -> EXTERN: (4652,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4654,10) clock(void)
  -> EXTERN: (4656,2) printf(const char *__restrict__, ...)
  -> (4657,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4649,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4650,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4650,11) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4650,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 4.440 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4648,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4637,1):remark #34051: REGISTER ALLOCATION : [s452] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4637

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm5]
        
    Routine temporaries
        Total         :      57
            Global    :      23
            Local     :      34
        Regenerable   :      25
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s453()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s453()) [117/176=66.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4664,1)
  -> (4672,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4673,12) clock(void)
  -> EXTERN: (4681,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4683,10) clock(void)
  -> EXTERN: (4685,2) printf(const char *__restrict__, ...)
  -> (4686,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4677,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4679,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4679,15) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.972
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 4.440 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4675,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4664,1):remark #34051: REGISTER ALLOCATION : [s453] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4664

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm5]
        
    Routine temporaries
        Total         :      53
            Global    :      23
            Local     :      30
        Regenerable   :      25
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s471()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s471()) [118/176=67.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4692,11)
  -> INLINE: (4697,2) set1d(float *, float, int) (isz = 67) (sz = 78)
  -> (4701,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4702,12) clock(void)
  -> DELETED: (4707,4) s471s(void) (isz = 0) (sz = 4)
  -> EXTERN: (4710,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4712,10) clock(void)
  -> EXTERN: (4714,2) printf(const char *__restrict__, ...)
  -> (4719,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3) inlined into /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4697,2)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4705,3)
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4706,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4706,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4706,18) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4706,25) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4708,4) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4708,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4708,18) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4708,25) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 4.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4716,2)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4717,3) ]
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4717,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4704,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3):remark #34026: call to memset implemented as a call to optimized library version
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4692,11):remark #34051: REGISTER ALLOCATION : [s471] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4692

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      75
            Global    :      29
            Local     :      46
        Regenerable   :      26
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [5.95e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s471s(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s471s(void)) [119/176=67.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(152,1)


    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(152,1):remark #34051: REGISTER ALLOCATION : [s471s] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:152

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rax]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s481()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s481()) [120/176=68.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4726,1)
  -> (4734,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4735,12) clock(void)
  -> EXTERN: (4740,5) exit(int)
  -> EXTERN: (4744,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4746,10) clock(void)
  -> EXTERN: (4748,2) printf(const char *__restrict__, ...)
  -> (4749,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4738,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4740,5) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4737,2)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4726,1):remark #34051: REGISTER ALLOCATION : [s481] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4726

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      42
            Global    :      14
            Local     :      28
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s482()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s482()) [121/176=68.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4757,1)
  -> (4765,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4766,12) clock(void)
  -> EXTERN: (4773,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4775,10) clock(void)
  -> EXTERN: (4777,2) printf(const char *__restrict__, ...)
  -> (4778,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4769,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4771,4) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4768,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4757,1):remark #34051: REGISTER ALLOCATION : [s482] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4757

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm2]
        
    Routine temporaries
        Total         :      42
            Global    :      20
            Local     :      22
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.69e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s491(int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s491(int *__restrict__)) [122/176=69.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4790,1)
  -> (4799,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4800,12) clock(void)
  -> EXTERN: (4806,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4808,10) clock(void)
  -> EXTERN: (4810,2) printf(const char *__restrict__, ...)
  -> (4811,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4803,3)
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4804,6) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4804,15) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4804,22) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4804,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <a[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4804,4) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.024
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 4  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4802,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4790,1):remark #34051: REGISTER ALLOCATION : [s491] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4790

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r10 r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      60
            Global    :      23
            Local     :      37
        Regenerable   :      23
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s4112(int *__restrict__, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s4112(int *__restrict__, float)) [123/176=69.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4818,1)
  -> (4827,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4828,12) clock(void)
  -> EXTERN: (4833,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4835,10) clock(void)
  -> EXTERN: (4837,2) printf(const char *__restrict__, ...)
  -> (4838,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4830,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4831,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4831,4) ]
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4831,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4831,12) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.040
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 15.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4829,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4818,1):remark #34051: REGISTER ALLOCATION : [s4112] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4818

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :      53
            Global    :      22
            Local     :      31
        Regenerable   :      22
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.99e+05 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s4113(int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s4113(int *__restrict__)) [124/176=70.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4845,1)
  -> (4854,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4855,12) clock(void)
  -> EXTERN: (4861,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4863,10) clock(void)
  -> EXTERN: (4865,2) printf(const char *__restrict__, ...)
  -> (4866,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4858,3)
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4859,6) ]
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4859,17) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4859,26) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <a[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4859,4) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4859,15) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.113
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 26.500 
   remark #15478: estimated potential speedup: 0.410 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 4  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4857,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4845,1):remark #34051: REGISTER ALLOCATION : [s4113] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4845

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r10 r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      56
            Global    :      23
            Local     :      33
        Regenerable   :      23
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s4114(int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s4114(int *, int)) [125/176=71.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4873,1)
  -> (4882,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4883,12) clock(void)
  -> EXTERN: (4892,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4894,10) clock(void)
  -> EXTERN: (4896,2) printf(const char *__restrict__, ...)
  -> (4897,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4887,3)
   remark #15389: vectorization support: reference a[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4889,4) ]
   remark #15389: vectorization support: reference b[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4889,11) ]
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4888,8) ]
   remark #15389: vectorization support: reference d[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4889,33) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <c[31999-*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4889,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.053
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 14.250 
   remark #15478: estimated potential speedup: 0.840 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 8  
   remark #25015: Estimate of max trip count of loop=32000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4887,3)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4886,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4873,1):remark #34051: REGISTER ALLOCATION : [s4114] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4873

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     158
            Global    :      29
            Local     :     129
        Regenerable   :      21
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [1.76e+05 ~ 0.0%]
            Writes    :       5 [4.92e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s4115(int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s4115(int *__restrict__)) [126/176=71.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4904,1)
  -> (4913,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4914,12) clock(void)
  -> EXTERN: (4922,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4924,10) clock(void)
  -> EXTERN: (4926,2) printf(const char *__restrict__, ...)
  -> (4928,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4919,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4920,11) ]
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4920,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4920,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.167
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 12.750 
   remark #15478: estimated potential speedup: 0.780 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25457: Number of partial sums replaced: 1
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4917,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4904,1):remark #34051: REGISTER ALLOCATION : [s4115] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4904

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      52
            Global    :      23
            Local     :      29
        Regenerable   :      22
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [1.99e+05 ~ 0.0%]
            Writes    :       4 [7.95e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s4116(int *__restrict__, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s4116(int *__restrict__, int, int)) [127/176=72.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4935,1)
  -> (4944,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4945,12) clock(void)
  -> EXTERN: (4955,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4957,10) clock(void)
  -> EXTERN: (4959,2) printf(const char *__restrict__, ...)
  -> (4961,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4951,3)
   remark #15389: vectorization support: reference a[inc+i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4953,11) ]
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4953,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <aa[j-1][*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4953,20) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.356
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 13.000 
   remark #15478: estimated potential speedup: 0.840 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25457: Number of partial sums replaced: 1
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4951,3)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4949,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4935,1):remark #34051: REGISTER ALLOCATION : [s4116] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4935

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r10 r13-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      64
            Global    :      28
            Local     :      36
        Regenerable   :      22
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [1.00e+06 ~ 0.1%]
            Writes    :       3 [1.00e+06 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s4117()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s4117()) [128/176=72.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4968,1)
  -> (4976,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (4977,12) clock(void)
  -> EXTERN: (4983,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (4985,10) clock(void)
  -> EXTERN: (4987,2) printf(const char *__restrict__, ...)
  -> (4988,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4980,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4981,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4981,11) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4981,27) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <c[i/2]>, part of index is nonlinearly computed   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4981,18) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.010
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 50.500 
   remark #15478: estimated potential speedup: 0.170 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4979,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4968,1):remark #34051: REGISTER ALLOCATION : [s4117] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4968

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      48
            Global    :      20
            Local     :      28
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s4121()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s4121()) [129/176=73.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4995,1)
  -> (5003,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5004,12) clock(void)
  -> INLINE (MANUAL): (5008,12) f(float, float) (isz = 0) (sz = 7)
  -> EXTERN: (5010,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5012,10) clock(void)
  -> EXTERN: (5014,2) printf(const char *__restrict__, ...)
  -> (5015,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5007,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5008,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5008,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5008,14) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5008,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 4.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5006,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4995,1):remark #34051: REGISTER ALLOCATION : [s4121] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4995

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      50
            Global    :      20
            Local     :      30
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vag(int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vag(int *__restrict__)) [130/176=73.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5048,1)
  -> (5057,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5058,12) clock(void)
  -> EXTERN: (5064,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5066,10) clock(void)
  -> EXTERN: (5068,2) printf(const char *__restrict__, ...)
  -> (5069,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5061,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5062,4) ]
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5062,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <b[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5062,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.115
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 13.000 
   remark #15478: estimated potential speedup: 0.460 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5060,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5048,1):remark #34051: REGISTER ALLOCATION : [vag] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5048

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 r15 zmm0]
        
    Routine temporaries
        Total         :      47
            Global    :      21
            Local     :      26
        Regenerable   :      22
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vbor()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vbor()) [131/176=74.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5355,1)
  -> (5364,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5365,12) clock(void)
  -> EXTERN: (5385,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5387,10) clock(void)
  -> EXTERN: (5389,2) printf(const char *__restrict__, ...)
  -> (5394,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5369,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5370,9) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5371,9) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5372,9) ]
   remark #15388: vectorization support: reference d[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5373,9) ]
   remark #15388: vectorization support: reference e[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5374,9) ]
   remark #15388: vectorization support: reference aa[0][i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5375,9) ]
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5383,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.330
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 137 
   remark #15477: vector cost: 45.500 
   remark #15478: estimated potential speedup: 2.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=64
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5391,2)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5392,3) ]
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5392,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5368,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5355,1):remark #34051: REGISTER ALLOCATION : [vbor] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5355

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm15]
        
    Routine temporaries
        Total         :     114
            Global    :      29
            Local     :      85
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [5.34e-01 ~ 0.0%]
            Writes    :       1 [5.62e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set1d(float *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set1d(float *, float, int)) [132/176=75.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(82,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(84,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(84,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(85,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.076
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 3.550 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(84,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(85,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.289
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(84,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(88,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(88,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(89,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.075
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 34 
   remark #15477: vector cost: 10.000 
   remark #15478: estimated potential speedup: 3.390 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(88,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(89,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.286
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(88,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr[i]>, stride is unknown to compiler   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(93,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.043
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(82,1):remark #34051: REGISTER ALLOCATION : [set1d] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:82

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm15]
        
    Routine temporaries
        Total         :     225
            Global    :      54
            Local     :     171
        Regenerable   :       8
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set1ds(int, float *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set1ds(int, float *, float, int)) [133/176=75.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(100,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(102,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(102,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(103,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.076
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 3.550 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(102,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(103,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.289
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(102,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(106,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(106,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(107,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.075
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 34 
   remark #15477: vector cost: 10.000 
   remark #15478: estimated potential speedup: 3.390 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(106,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(107,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.286
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(106,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(110,3)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr[i]>, stride is unknown to compiler   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(111,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.043
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(100,1):remark #34051: REGISTER ALLOCATION : [set1ds] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:100

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm15]
        
    Routine temporaries
        Total         :     226
            Global    :      54
            Local     :     172
        Regenerable   :       8
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set2d(float (*)[256], float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set2d(float (*)[256], float, int)) [134/176=76.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(118,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(123,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(124,4)
      remark #15389: vectorization support: reference arr[i][j] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(125,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 24.340 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(129,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(130,4)
      remark #15389: vectorization support: reference arr[i][j] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(131,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 33 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 25.910 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(135,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(136,4)
   <Multiversioned v2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr[i][j]>, stride is unknown to compiler   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(137,5) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.043
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 0.340 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=256
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(118,1):remark #34051: REGISTER ALLOCATION : [set2d] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:118

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm1]
        
    Routine temporaries
        Total         :      50
            Global    :      29
            Local     :      21
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sum1d(float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sum1d(float *)) [135/176=76.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(144,28)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(146,2)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(146,2)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(147,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 1.025
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.980 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(146,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(147,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.429
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(146,2)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(144,28):remark #34051: REGISTER ALLOCATION : [sum1d] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:144

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rsi rdi r8 zmm0-zmm8]
        
    Routine temporaries
        Total         :      50
            Global    :      28
            Local     :      22
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: f(float, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (f(float, float)) [136/176=77.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(157,33)


    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(157,33):remark #34051: REGISTER ALLOCATION : [f] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:157

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ zmm0-zmm1]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s000()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s000()) [137/176=77.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(776,1)
  -> (784,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (785,12) clock(void)
  -> EXTERN: (793,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (795,10) clock(void)
  -> EXTERN: (797,2) printf(const char *__restrict__, ...)
  -> (798,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(788,3)
   remark #15388: vectorization support: reference X[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(791,4) ]
   remark #15388: vectorization support: reference Y[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(791,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(787,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(776,1):remark #34051: REGISTER ALLOCATION : [s000] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:776

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      47
            Global    :      21
            Local     :      26
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s111()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s111()) [138/176=78.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(804,1)
  -> (812,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (813,12) clock(void)
  -> EXTERN: (820,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (822,10) clock(void)
  -> EXTERN: (824,2) printf(const char *__restrict__, ...)
  -> (825,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(817,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(818,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i-1]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(818,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <b[i]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(818,22) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(815,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(804,1):remark #34051: REGISTER ALLOCATION : [s111] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:804

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      44
            Global    :      22
            Local     :      22
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s112()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s112()) [139/176=79.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(856,1)
  -> (864,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (865,12) clock(void)
  -> EXTERN: (872,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (874,10) clock(void)
  -> EXTERN: (876,2) printf(const char *__restrict__, ...)
  -> (877,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(869,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <a[i+1]>, stride is -1   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(870,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[i]>, stride is -1   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(870,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <b[i]>, stride is -1   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(870,20) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(869,3)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(867,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(856,1):remark #34051: REGISTER ALLOCATION : [s112] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:856

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      46
            Global    :      22
            Local     :      24
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1112()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1112()) [140/176=79.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(883,1)
  -> (891,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (892,12) clock(void)
  -> EXTERN: (898,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (900,10) clock(void)
  -> EXTERN: (903,2) printf(const char *__restrict__, ...)
  -> (904,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(895,3)
   remark #25453: Loop Reversed
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(896,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(896,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(894,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(883,1):remark #34051: REGISTER ALLOCATION : [s1112] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:883

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      47
            Global    :      21
            Local     :      26
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s113()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s113()) [141/176=80.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(911,1)
  -> (919,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (920,12) clock(void)
  -> EXTERN: (926,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (928,10) clock(void)
  -> EXTERN: (930,2) printf(const char *__restrict__, ...)
  -> (931,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(923,3)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(923,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(924,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(924,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.094
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 2.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(923,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(924,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(924,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.444
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(922,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(911,1):remark #34051: REGISTER ALLOCATION : [s113] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:911

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      23
            Local     :      36
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1113()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1113()) [142/176=80.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(936,1)
  -> (944,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (945,12) clock(void)
  -> EXTERN: (951,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (953,10) clock(void)
  -> EXTERN: (955,2) printf(const char *__restrict__, ...)
  -> (956,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(948,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (949:4) and a[16000] (949:4)
   remark #15346: vector dependence: assumed ANTI dependence between a[16000] (949:4) and a[i] (949:4)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(947,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(936,1):remark #34051: REGISTER ALLOCATION : [s1113] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:936

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      42
            Global    :      20
            Local     :      22
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s151s(float *, float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s151s(float *, float *, int)) [143/176=81.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1516,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1517,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (1518:3) and a[i+m] (1518:3)
   remark #15346: vector dependence: assumed ANTI dependence between a[i+m] (1518:3) and a[i] (1518:3)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1517,2)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1516,1):remark #34051: REGISTER ALLOCATION : [s151s] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1516

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 zmm0-zmm1]
        
    Routine temporaries
        Total         :      24
            Global    :      11
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s152s(float *, float *, float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s152s(float *, float *, float *, int)) [144/176=81.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1547,1)


    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1547,1):remark #34051: REGISTER ALLOCATION : [s152s] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1547

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi zmm0]
        
    Routine temporaries
        Total         :      19
            Global    :       0
            Local     :      19
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s174(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s174(int)) [145/176=82.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1757,1)
  -> (1765,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1766,12) clock(void)
  -> EXTERN: (1772,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1774,10) clock(void)
  -> EXTERN: (1776,2) printf(const char *__restrict__, ...)
  -> (1777,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1769,3)
   remark #15389: vectorization support: reference a[i+M] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,13) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.107
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 3.420 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1769,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a[i+M] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,13) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1770,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=8000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1769,3)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=32000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1768,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1757,1):remark #34051: REGISTER ALLOCATION : [s174] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1757

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      69
            Global    :      35
            Local     :      34
        Regenerable   :      22
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [1.60e+00 ~ 0.0%]
            Writes    :       3 [1.69e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s1221()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s1221()) [146/176=83.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1953,1)
  -> (1960,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (1961,12) clock(void)
  -> EXTERN: (1967,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (1969,10) clock(void)
  -> EXTERN: (1971,2) printf(const char *__restrict__, ...)
  -> (1972,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1964,3)
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,4) ]
   remark #15388: vectorization support: reference b[i-4] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,11) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.790 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1964,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,4) ]
   remark #15388: vectorization support: reference b[i-4] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,11) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1965,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1963,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(1953,1):remark #34051: REGISTER ALLOCATION : [s1221] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:1953

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      51
            Global    :      23
            Local     :      28
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s293()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s293()) [147/176=83.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3276,1)
  -> (3283,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3284,12) clock(void)
  -> EXTERN: (3290,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3292,10) clock(void)
  -> EXTERN: (3294,2) printf(const char *__restrict__, ...)
  -> (3295,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3287,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[i] (3288:4) and a[0] (3288:4)
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3286,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3276,1):remark #34051: REGISTER ALLOCATION : [s293] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3276

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0]
        
    Routine temporaries
        Total         :      40
            Global    :      20
            Local     :      20
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s311()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s311()) [148/176=84.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3399,1)
  -> (3407,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3408,12) clock(void)
  -> EXTERN: (3416,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3418,10) clock(void)
  -> EXTERN: (3420,2) printf(const char *__restrict__, ...)
  -> (3421,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3413,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3414,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3411,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3399,1):remark #34051: REGISTER ALLOCATION : [s311] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3399

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      58
            Global    :      28
            Local     :      30
        Regenerable   :      21
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.20e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test(float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test(float *)) [149/176=84.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3425,21)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3428,3)
   remark #15389: vectorization support: reference A[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3429,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 5.667
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 0.500 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3425,21):remark #34051: REGISTER ALLOCATION : [test] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3425

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s312()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s312()) [150/176=85.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3468,1)
  -> (3476,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3477,12) clock(void)
  -> EXTERN: (3485,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3487,10) clock(void)
  -> EXTERN: (3489,2) printf(const char *__restrict__, ...)
  -> (3491,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3482,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3483,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.292
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3480,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3468,1):remark #34051: REGISTER ALLOCATION : [s312] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3468

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      48
            Global    :      22
            Local     :      26
        Regenerable   :      22
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [3.74e+00 ~ 0.0%]
            Writes    :       7 [9.99e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s314()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s314()) [151/176=85.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3527,1)
  -> (3535,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3536,12) clock(void)
  -> EXTERN: (3546,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3548,10) clock(void)
  -> EXTERN: (3550,2) printf(const char *__restrict__, ...)
  -> (3552,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3541,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3542,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.456
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 1.880 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3539,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3527,1):remark #34051: REGISTER ALLOCATION : [s314] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3527

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :      51
            Global    :      21
            Local     :      30
        Regenerable   :      20
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [6.94e+00 ~ 0.0%]
            Writes    :       7 [9.99e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s316()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s316()) [152/176=86.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3597,1)
  -> (3605,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3606,12) clock(void)
  -> EXTERN: (3616,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3618,10) clock(void)
  -> EXTERN: (3620,2) printf(const char *__restrict__, ...)
  -> (3622,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3611,3)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3611,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3612,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.431
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1999
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3611,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3612,8) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.158
   remark #25436: completely unrolled by 12  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3609,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3597,1):remark #34051: REGISTER ALLOCATION : [s316] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3597

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm13]
        
    Routine temporaries
        Total         :      81
            Global    :      21
            Local     :      60
        Regenerable   :      20
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       8 [9.99e+05 ~ 0.0%]
            Writes    :       8 [9.99e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: s317()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (s317()) [153/176=86.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3628,1)
  -> (3638,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (3639,12) clock(void)
  -> EXTERN: (3647,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (3649,10) clock(void)
  -> EXTERN: (3651,2) printf(const char *__restrict__, ...)
  -> (3653,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3644,3)
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.292
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3642,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(3628,1):remark #34051: REGISTER ALLOCATION : [s317] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:3628

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      49
            Global    :      23
            Local     :      26
        Regenerable   :      23
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [9.92e-01 ~ 0.0%]
            Writes    :       1 [1.00e+06 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: max(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (max(int, int)) [154/176=87.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4021,1)


    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4021,1):remark #34051: REGISTER ALLOCATION : [max] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4021

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: min(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (min(int, int)) [155/176=88.1%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4783,22)


    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(4783,22):remark #34051: REGISTER ALLOCATION : [min] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:4783

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: va()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (va()) [156/176=88.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5022,1)
  -> (5029,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5030,12) clock(void)
  -> EXTERN: (5036,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5038,10) clock(void)
  -> EXTERN: (5040,2) printf(const char *__restrict__, ...)
  -> (5041,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5033,3)
   remark #25399: memcopy generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5032,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5033,3):remark #34026: call to memcpy implemented as a call to optimized library version
/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5022,1):remark #34051: REGISTER ALLOCATION : [va] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5022

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      39
            Global    :      18
            Local     :      21
        Regenerable   :      24
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.20e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vas(int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vas(int *__restrict__)) [157/176=89.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5076,1)
  -> (5085,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5086,12) clock(void)
  -> EXTERN: (5092,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5094,10) clock(void)
  -> EXTERN: (5096,2) printf(const char *__restrict__, ...)
  -> (5097,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5089,3)
   remark #15389: vectorization support: reference ip[i] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5090,6) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5090,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <a[*(ip+i*4)]>, part of index is read from memory   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5090,4) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.115
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 13.000 
   remark #15478: estimated potential speedup: 0.460 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5088,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5076,1):remark #34051: REGISTER ALLOCATION : [vas] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5076

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8-r9 r15 zmm0]
        
    Routine temporaries
        Total         :      47
            Global    :      21
            Local     :      26
        Regenerable   :      22
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vif()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vif()) [158/176=89.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5104,1)
  -> (5112,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5113,12) clock(void)
  -> EXTERN: (5121,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5123,10) clock(void)
  -> EXTERN: (5125,2) printf(const char *__restrict__, ...)
  -> (5126,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5116,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5118,5) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5118,12) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5118,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 22 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 6.280 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5115,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5104,1):remark #34051: REGISTER ALLOCATION : [vif] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5104

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      49
            Global    :      21
            Local     :      28
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vpv()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vpv()) [159/176=90.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5133,1)
  -> (5141,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5142,12) clock(void)
  -> EXTERN: (5148,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5150,10) clock(void)
  -> EXTERN: (5152,2) printf(const char *__restrict__, ...)
  -> (5153,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5145,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5146,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5146,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5146,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.800 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5144,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5133,1):remark #34051: REGISTER ALLOCATION : [vpv] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5133

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      46
            Global    :      20
            Local     :      26
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.20e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vtv()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vtv()) [160/176=90.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5160,1)
  -> (5168,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5169,12) clock(void)
  -> EXTERN: (5176,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5178,10) clock(void)
  -> EXTERN: (5180,2) printf(const char *__restrict__, ...)
  -> (5181,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5173,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5174,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5174,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5174,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5172,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5160,1):remark #34051: REGISTER ALLOCATION : [vtv] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      46
            Global    :      20
            Local     :      26
        Regenerable   :      22
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.20e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vpvtv()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vpvtv()) [161/176=91.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5188,1)
  -> (5196,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5197,12) clock(void)
  -> EXTERN: (5203,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5205,10) clock(void)
  -> EXTERN: (5207,2) printf(const char *__restrict__, ...)
  -> (5208,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5200,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5201,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5201,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5201,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5201,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 4.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5199,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5188,1):remark #34051: REGISTER ALLOCATION : [vpvtv] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5188

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      50
            Global    :      20
            Local     :      30
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vpvts(float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vpvts(float)) [162/176=92.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5215,1)
  -> (5223,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5224,12) clock(void)
  -> EXTERN: (5230,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5232,10) clock(void)
  -> EXTERN: (5234,2) printf(const char *__restrict__, ...)
  -> (5235,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5227,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5228,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5228,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5228,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.094
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5226,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5215,1):remark #34051: REGISTER ALLOCATION : [vpvts] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5215

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm4]
        
    Routine temporaries
        Total         :      54
            Global    :      22
            Local     :      32
        Regenerable   :      22
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       2 [1.99e+05 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vpvpv()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vpvpv()) [163/176=92.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5242,1)
  -> (5250,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5251,12) clock(void)
  -> EXTERN: (5257,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5259,10) clock(void)
  -> EXTERN: (5261,2) printf(const char *__restrict__, ...)
  -> (5262,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5254,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5255,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5255,4) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5255,12) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5255,19) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 5.140 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5253,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5242,1):remark #34051: REGISTER ALLOCATION : [vpvpv] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5242

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      50
            Global    :      20
            Local     :      30
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vtvtv()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vtvtv()) [164/176=93.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5269,1)
  -> (5277,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5278,12) clock(void)
  -> EXTERN: (5284,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5286,10) clock(void)
  -> EXTERN: (5288,2) printf(const char *__restrict__, ...)
  -> (5289,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5281,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5282,4) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5282,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5282,18) ]
   remark #15388: vectorization support: reference c[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5282,25) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5280,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5269,1):remark #34051: REGISTER ALLOCATION : [vtvtv] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5269

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 zmm0-zmm3]
        
    Routine temporaries
        Total         :      50
            Global    :      20
            Local     :      30
        Regenerable   :      22
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       1 [9.38e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vsumr()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vsumr()) [165/176=93.8%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5296,1)
  -> (5304,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5305,12) clock(void)
  -> EXTERN: (5313,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5315,10) clock(void)
  -> EXTERN: (5317,2) printf(const char *__restrict__, ...)
  -> (5318,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5310,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5311,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5308,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5296,1):remark #34051: REGISTER ALLOCATION : [vsumr] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5296

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      58
            Global    :      28
            Local     :      30
        Regenerable   :      21
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [3.20e+00 ~ 0.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vdotr()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vdotr()) [166/176=94.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5325,1)
  -> (5333,2) init(char *) (isz = 3783) (sz = 3790)
     [[ Inlining would exceed -inline-max-size value (3790>230) <2>]]
  -> EXTERN: (5334,12) clock(void)
  -> EXTERN: (5342,3) dummy(float *, float *, float *, float *, float *, float (*)[256], float (*)[256], float (*)[256], float)
  -> EXTERN: (5344,10) clock(void)
  -> EXTERN: (5346,2) printf(const char *__restrict__, ...)
  -> (5348,2) check(int) (isz = 243) (sz = 248)
     [[ Inlining would exceed -inline-max-size value (248>230) <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5339,3)
   remark #15388: vectorization support: reference a[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5340,11) ]
   remark #15388: vectorization support: reference b[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5340,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.969
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5337,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(5325,1):remark #34051: REGISTER ALLOCATION : [vdotr] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:5325

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      58
            Global    :      25
            Local     :      33
        Regenerable   :      21
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [3.74e+00 ~ 0.0%]
            Writes    :       7 [9.99e+05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set1d..0(float *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set1d..0(float *, float, int)) [167/176=94.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(82,1)
  CLONED FROM: set1d(float *, float, int)(X,X,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(93,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.083
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.310 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(93,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.600
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(92,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(82,1):remark #34051: REGISTER ALLOCATION : [set1d..0] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:82

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 zmm0-zmm1]
        
    Routine temporaries
        Total         :      33
            Global    :      20
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set1d..1(float *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set1d..1(float *, float, int)) [168/176=95.5%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(82,1)
  CLONED FROM: set1d(float *, float, int)(X,X,-1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(84,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(84,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(85,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.076
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 3.550 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(84,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(85,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.289
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(84,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(82,1):remark #34051: REGISTER ALLOCATION : [set1d..1] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:82

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm9]
        
    Routine temporaries
        Total         :      93
            Global    :      26
            Local     :      67
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set1d..2(float *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set1d..2(float *, float, int)) [169/176=96.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(82,1)
  CLONED FROM: set1d(float *, float, int)(X,X,-2)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(88,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(88,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(89,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.075
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 34 
   remark #15477: vector cost: 10.000 
   remark #15478: estimated potential speedup: 3.390 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(88,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(89,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.286
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(88,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(82,1):remark #34051: REGISTER ALLOCATION : [set1d..2] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:82

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm15]
        
    Routine temporaries
        Total         :     126
            Global    :      27
            Local     :      99
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set2d..0(float (*)[256], float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set2d..0(float (*)[256], float, int)) [170/176=96.6%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(118,1)
  CLONED FROM: set2d(float (*)[256], float, int)(X,X,-1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(123,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(124,4)
      remark #15389: vectorization support: reference arr[i][j] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(125,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 24.340 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(118,1):remark #34051: REGISTER ALLOCATION : [set2d..0] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:118

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      21
            Global    :      13
            Local     :       8
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set2d..1(float (*)[256], float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set2d..1(float (*)[256], float, int)) [171/176=97.2%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(118,1)
  CLONED FROM: set2d(float (*)[256], float, int)(X,X,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(135,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(135,3)
   remark #25420: Collapsed with loop at line 136 
   remark #15388: vectorization support: reference arr[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(137,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.083
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4096

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(136,4)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(135,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i][j] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(137,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.600
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(135,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(118,1):remark #34051: REGISTER ALLOCATION : [set2d..1] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:118

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 zmm0-zmm1]
        
    Routine temporaries
        Total         :      33
            Global    :      20
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set2d..2(float (*)[256], float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set2d..2(float (*)[256], float, int)) [172/176=97.7%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(118,1)
  CLONED FROM: set2d(float (*)[256], float, int)(X,X,-2)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(129,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(130,4)
      remark #15389: vectorization support: reference arr[i][j] has unaligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(131,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 33 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 25.910 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=32
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(118,1):remark #34051: REGISTER ALLOCATION : [set2d..2] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:118

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      21
            Global    :      13
            Local     :       8
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set1ds..0(int, float *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set1ds..0(int, float *, float, int)) [173/176=98.3%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(100,1)
  CLONED FROM: set1ds(int, float *, float, int)(X,X,X,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(110,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(110,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(111,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.083
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.310 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(110,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(111,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.600
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(110,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(100,1):remark #34051: REGISTER ALLOCATION : [set1ds..0] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:100

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 zmm0-zmm1]
        
    Routine temporaries
        Total         :      34
            Global    :      20
            Local     :      14
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set1ds..1(int, float *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set1ds..1(int, float *, float, int)) [174/176=98.9%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(100,1)
  CLONED FROM: set1ds(int, float *, float, int)(X,X,X,2)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(110,3)
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr[i]>, stride is 2   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(111,4) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(100,1):remark #34051: REGISTER ALLOCATION : [set1ds..1] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:100

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rsi rdi zmm0]
        
    Routine temporaries
        Total         :      17
            Global    :       9
            Local     :       8
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set1ds..2(int, float *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set1ds..2(int, float *, float, int)) [175/176=99.4%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(100,1)
  CLONED FROM: set1ds(int, float *, float, int)(X,X,X,-1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(102,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(102,3)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(103,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.076
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.000 
   remark #15478: estimated potential speedup: 3.550 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2000
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(102,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference arr[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(103,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.289
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(102,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(100,1):remark #34051: REGISTER ALLOCATION : [set1ds..2] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:100

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm9]
        
    Routine temporaries
        Total         :      94
            Global    :      26
            Local     :      68
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init(char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init(char *)) [176/176=100.0%] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(213,1)
  -> EXTERN: (224,7) strcmp(const char *, const char *)
  -> EXTERN: (232,14) strcmp(const char *, const char *)
  -> CP_CLONE (233,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (234,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (235,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (236,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (237,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (238,14) strcmp(const char *, const char *)
  -> CP_CLONE (239,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (240,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (241,14) strcmp(const char *, const char *)
  -> CP_CLONE (242,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (243,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (244,14) strcmp(const char *, const char *)
  -> CP_CLONE (245,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (246,3) set2d..2(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (247,14) strcmp(const char *, const char *)
  -> CP_CLONE (248,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (249,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (250,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (251,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (252,14) strcmp(const char *, const char *)
  -> CP_CLONE (253,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (254,14) strcmp(const char *, const char *)
  -> CP_CLONE (255,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (256,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (257,14) strcmp(const char *, const char *)
  -> CP_CLONE (258,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (259,3) set2d..2(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (260,14) strcmp(const char *, const char *)
  -> CP_CLONE (261,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (262,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (263,14) strcmp(const char *, const char *)
  -> CP_CLONE (264,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (265,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (266,14) strcmp(const char *, const char *)
  -> CP_CLONE (267,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (268,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (269,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (270,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (271,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (272,14) strcmp(const char *, const char *)
  -> CP_CLONE (273,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (274,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (275,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (276,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (277,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (278,14) strcmp(const char *, const char *)
  -> CP_CLONE (279,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (280,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (281,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (282,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (283,14) strcmp(const char *, const char *)
  -> CP_CLONE (284,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (285,3) set1ds..2(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (286,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (287,14) strcmp(const char *, const char *)
  -> CP_CLONE (288,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (289,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (290,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (291,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (292,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (293,14) strcmp(const char *, const char *)
  -> CP_CLONE (294,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (295,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (296,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (297,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (298,14) strcmp(const char *, const char *)
  -> CP_CLONE (299,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (300,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (301,14) strcmp(const char *, const char *)
  -> CP_CLONE (302,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (303,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (304,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (305,14) strcmp(const char *, const char *)
  -> CP_CLONE (306,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (307,3) set2d..2(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (308,14) strcmp(const char *, const char *)
  -> CP_CLONE (309,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (310,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (311,14) strcmp(const char *, const char *)
  -> CP_CLONE (312,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (313,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (314,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (315,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (316,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (317,14) strcmp(const char *, const char *)
  -> CP_CLONE (318,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (319,3) set1ds..1(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (320,3) set1ds..1(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (321,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (322,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (323,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (324,14) strcmp(const char *, const char *)
  -> CP_CLONE (325,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (326,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (327,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (328,14) strcmp(const char *, const char *)
  -> CP_CLONE (329,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (330,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (331,14) strcmp(const char *, const char *)
  -> CP_CLONE (332,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (333,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (334,14) strcmp(const char *, const char *)
  -> CP_CLONE (335,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (336,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (337,14) strcmp(const char *, const char *)
  -> CP_CLONE (338,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (339,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (340,14) strcmp(const char *, const char *)
  -> CP_CLONE (341,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (342,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (343,14) strcmp(const char *, const char *)
  -> CP_CLONE (344,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (345,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (346,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (347,14) strcmp(const char *, const char *)
  -> CP_CLONE (348,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (349,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (350,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (351,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (352,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (353,14) strcmp(const char *, const char *)
  -> CP_CLONE (354,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (355,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (356,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (357,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (358,14) strcmp(const char *, const char *)
  -> CP_CLONE (359,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (360,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (361,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (362,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (363,14) strcmp(const char *, const char *)
  -> CP_CLONE (364,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (365,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (366,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (367,14) strcmp(const char *, const char *)
  -> CP_CLONE (368,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (369,3) set2d..2(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (370,14) strcmp(const char *, const char *)
  -> CP_CLONE (371,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (372,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (373,14) strcmp(const char *, const char *)
  -> CP_CLONE (374,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (375,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (376,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (377,14) strcmp(const char *, const char *)
  -> CP_CLONE (378,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (379,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (380,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (381,14) strcmp(const char *, const char *)
  -> CP_CLONE (382,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (383,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (384,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (385,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (386,3) set2d..2(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (387,14) strcmp(const char *, const char *)
  -> CP_CLONE (388,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (389,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (390,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (391,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (392,14) strcmp(const char *, const char *)
  -> CP_CLONE (393,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (394,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (395,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (396,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (397,14) strcmp(const char *, const char *)
  -> CP_CLONE (398,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (399,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (400,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (401,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (402,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (403,14) strcmp(const char *, const char *)
  -> CP_CLONE (404,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (405,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (406,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (407,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (408,14) strcmp(const char *, const char *)
  -> CP_CLONE (409,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (410,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (411,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (412,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (413,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (414,14) strcmp(const char *, const char *)
  -> CP_CLONE (415,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (416,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (417,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (418,14) strcmp(const char *, const char *)
  -> CP_CLONE (419,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (420,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (421,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (422,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (423,14) strcmp(const char *, const char *)
  -> CP_CLONE (424,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (425,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (426,14) strcmp(const char *, const char *)
  -> CP_CLONE (427,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (428,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (429,14) strcmp(const char *, const char *)
  -> CP_CLONE (430,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (431,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (432,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (433,14) strcmp(const char *, const char *)
  -> CP_CLONE (434,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (435,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (436,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (437,14) strcmp(const char *, const char *)
  -> CP_CLONE (438,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (439,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (440,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (441,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (442,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (443,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (444,14) strcmp(const char *, const char *)
  -> CP_CLONE (445,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (446,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (447,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (448,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (449,14) strcmp(const char *, const char *)
  -> CP_CLONE (450,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (451,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (452,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (453,14) strcmp(const char *, const char *)
  -> CP_CLONE (454,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (455,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (456,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (457,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (458,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (459,14) strcmp(const char *, const char *)
  -> CP_CLONE (460,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (461,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (462,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (463,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (464,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (465,14) strcmp(const char *, const char *)
  -> CP_CLONE (466,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (467,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (468,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (469,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (470,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (471,14) strcmp(const char *, const char *)
  -> CP_CLONE (472,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (473,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (474,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (475,14) strcmp(const char *, const char *)
  -> CP_CLONE (476,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (477,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (478,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (479,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (480,14) strcmp(const char *, const char *)
  -> CP_CLONE (481,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (482,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (483,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (484,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (485,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (486,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (487,14) strcmp(const char *, const char *)
  -> CP_CLONE (488,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (489,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (490,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (491,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (492,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (493,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (494,14) strcmp(const char *, const char *)
  -> CP_CLONE (495,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (496,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (498,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (499,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (500,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (501,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (502,14) strcmp(const char *, const char *)
  -> CP_CLONE (503,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (504,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (505,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (506,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (507,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (508,14) strcmp(const char *, const char *)
  -> CP_CLONE (509,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (510,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (511,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (512,14) strcmp(const char *, const char *)
  -> CP_CLONE (513,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (514,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (515,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (516,14) strcmp(const char *, const char *)
  -> CP_CLONE (517,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (518,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (519,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (520,14) strcmp(const char *, const char *)
  -> CP_CLONE (521,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (522,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (523,14) strcmp(const char *, const char *)
  -> CP_CLONE (524,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (525,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (526,14) strcmp(const char *, const char *)
  -> CP_CLONE (527,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (528,14) strcmp(const char *, const char *)
  -> CP_CLONE (529,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (530,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (531,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (532,14) strcmp(const char *, const char *)
  -> CP_CLONE (533,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (534,14) strcmp(const char *, const char *)
  -> CP_CLONE (536,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (537,14) strcmp(const char *, const char *)
  -> CP_CLONE (538,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (539,14) strcmp(const char *, const char *)
  -> CP_CLONE (540,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (541,14) strcmp(const char *, const char *)
  -> CP_CLONE (542,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (543,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (544,14) strcmp(const char *, const char *)
  -> CP_CLONE (545,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (546,14) strcmp(const char *, const char *)
  -> CP_CLONE (547,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (548,14) strcmp(const char *, const char *)
  -> CP_CLONE (549,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (550,14) strcmp(const char *, const char *)
  -> EXTERN: (551,14) strcmp(const char *, const char *)
  -> CP_CLONE (552,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (554,14) strcmp(const char *, const char *)
  -> CP_CLONE (555,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (556,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (557,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (558,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (559,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (560,14) strcmp(const char *, const char *)
  -> CP_CLONE (561,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (563,14) strcmp(const char *, const char *)
  -> CP_CLONE (564,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (565,14) strcmp(const char *, const char *)
  -> CP_CLONE (566,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (567,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (568,14) strcmp(const char *, const char *)
  -> CP_CLONE (569,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (571,14) strcmp(const char *, const char *)
  -> CP_CLONE (572,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (573,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (574,14) strcmp(const char *, const char *)
  -> CP_CLONE (575,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (576,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (577,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (578,14) strcmp(const char *, const char *)
  -> CP_CLONE (579,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (580,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (581,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (582,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (583,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (584,14) strcmp(const char *, const char *)
  -> CP_CLONE (585,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (587,14) strcmp(const char *, const char *)
  -> CP_CLONE (588,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (590,14) strcmp(const char *, const char *)
  -> CP_CLONE (591,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (592,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (593,14) strcmp(const char *, const char *)
  -> CP_CLONE (594,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (595,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (596,14) strcmp(const char *, const char *)
  -> CP_CLONE (597,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (598,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (599,14) strcmp(const char *, const char *)
  -> CP_CLONE (600,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (601,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (603,14) strcmp(const char *, const char *)
  -> CP_CLONE (604,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (605,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (606,14) strcmp(const char *, const char *)
  -> CP_CLONE (607,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (608,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (610,14) strcmp(const char *, const char *)
  -> CP_CLONE (611,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (612,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (613,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (614,14) strcmp(const char *, const char *)
  -> CP_CLONE (615,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (616,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (617,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (618,14) strcmp(const char *, const char *)
  -> CP_CLONE (619,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (620,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (621,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (622,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (623,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (624,14) strcmp(const char *, const char *)
  -> CP_CLONE (625,3) set2d..1(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (626,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (627,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (628,14) strcmp(const char *, const char *)
  -> CP_CLONE (629,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (630,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (631,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (633,14) strcmp(const char *, const char *)
  -> CP_CLONE (634,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (635,14) strcmp(const char *, const char *)
  -> CP_CLONE (636,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (637,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (638,14) strcmp(const char *, const char *)
  -> CP_CLONE (639,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (640,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (641,14) strcmp(const char *, const char *)
  -> CP_CLONE (642,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (643,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (644,14) strcmp(const char *, const char *)
  -> CP_CLONE (645,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (646,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (647,14) strcmp(const char *, const char *)
  -> CP_CLONE (648,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (649,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (650,14) strcmp(const char *, const char *)
  -> CP_CLONE (651,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (652,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (653,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (654,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (655,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (656,3) set1ds..0(int, float *, float, int) (isz = 66) (sz = 79)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (657,14) strcmp(const char *, const char *)
  -> CP_CLONE (658,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (659,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (660,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (661,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (662,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (663,14) strcmp(const char *, const char *)
  -> CP_CLONE (664,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (665,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (666,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (667,14) strcmp(const char *, const char *)
  -> CP_CLONE (668,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (669,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (670,14) strcmp(const char *, const char *)
  -> CP_CLONE (671,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (672,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (673,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (674,14) strcmp(const char *, const char *)
  -> CP_CLONE (675,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (676,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (677,14) strcmp(const char *, const char *)
  -> CP_CLONE (678,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (679,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (680,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (681,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (682,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (683,14) strcmp(const char *, const char *)
  -> CP_CLONE (684,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (685,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (686,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (687,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (688,14) strcmp(const char *, const char *)
  -> CP_CLONE (689,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (690,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (691,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (692,14) strcmp(const char *, const char *)
  -> CP_CLONE (693,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (694,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (695,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (696,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (697,14) strcmp(const char *, const char *)
  -> CP_CLONE (698,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (699,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (700,14) strcmp(const char *, const char *)
  -> CP_CLONE (701,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (702,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (703,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (704,14) strcmp(const char *, const char *)
  -> CP_CLONE (705,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (706,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (707,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (708,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (709,14) strcmp(const char *, const char *)
  -> CP_CLONE (710,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (711,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (712,14) strcmp(const char *, const char *)
  -> CP_CLONE (713,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (714,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (715,14) strcmp(const char *, const char *)
  -> CP_CLONE (716,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (717,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (718,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (719,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (720,14) strcmp(const char *, const char *)
  -> CP_CLONE (721,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (722,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (723,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (724,14) strcmp(const char *, const char *)
  -> CP_CLONE (725,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (726,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (727,14) strcmp(const char *, const char *)
  -> CP_CLONE (728,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (729,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (730,14) strcmp(const char *, const char *)
  -> CP_CLONE (731,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (732,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (733,14) strcmp(const char *, const char *)
  -> CP_CLONE (734,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (735,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (736,14) strcmp(const char *, const char *)
  -> CP_CLONE (737,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (738,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (739,14) strcmp(const char *, const char *)
  -> CP_CLONE (740,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (741,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (742,14) strcmp(const char *, const char *)
  -> CP_CLONE (743,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (744,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (745,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (746,14) strcmp(const char *, const char *)
  -> CP_CLONE (747,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (748,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (749,14) strcmp(const char *, const char *)
  -> CP_CLONE (750,3) set1d..2(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (751,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (752,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (753,14) strcmp(const char *, const char *)
  -> CP_CLONE (754,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (755,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (756,3) set1d..0(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (757,14) strcmp(const char *, const char *)
  -> CP_CLONE (758,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (759,14) strcmp(const char *, const char *)
  -> CP_CLONE (760,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (761,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (762,14) strcmp(const char *, const char *)
  -> CP_CLONE (763,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (764,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (765,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (766,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (767,3) set1d..1(float *, float, int) (isz = 67) (sz = 78)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> CP_CLONE (768,3) set2d..0(float (*)[256], float, int) (isz = 109) (sz = 120)
     [[ Inlining inhibited by overrideable criterion  <3>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(225,4)
   remark #15388: vectorization support: reference X[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(226,13) ]
   remark #15388: vectorization support: reference Y[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(227,13) ]
   remark #15388: vectorization support: reference Z[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(228,13) ]
   remark #15388: vectorization support: reference U[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(229,13) ]
   remark #15388: vectorization support: reference V[i] has aligned access   [ /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(230,13) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 26 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 3.460 
   remark #15487: type converts: 5 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4000
LOOP END

    Report from: Code generation optimizations [cg]

/home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c(213,1):remark #34051: REGISTER ALLOCATION : [init] /home/praveen/FYP/Benchmarks/Vectorization Benchmark/TSVC/test/tsc.c:213

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi zmm0-zmm15]
        
    Routine temporaries
        Total         :    2536
            Global    :     251
            Local     :    2285
        Regenerable   :    2099
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining this function at this call site would increase the size of the 
    caller more than is currently acceptable. Use the option 
    -inline-max-total-size to increase the size that all functions can 
    grow through inlining, add "#pragma optimization_parameter 
    inline_max_total_size" to the caller, add "inline 
    __attribute__((always_inline))" to the declaration of the called 
    function, or add "#pragma forceinline" before the call site.

<2> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

<3> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "inline __attribute__((always_inline))" to the declaration of
    the called function or add "#pragma forceinline" before the call site.

